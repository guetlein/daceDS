/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.fau.cs7.daceDS.datamodel;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Waypoint extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5655400239117066315L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Waypoint\",\"namespace\":\"eu.fau.cs7.daceDS.datamodel\",\"fields\":[{\"name\":\"roadId\",\"type\":\"long\"},{\"name\":\"laneId\",\"type\":\"int\"},{\"name\":\"s\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Waypoint> ENCODER =
      new BinaryMessageEncoder<Waypoint>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Waypoint> DECODER =
      new BinaryMessageDecoder<Waypoint>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Waypoint> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Waypoint> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Waypoint> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Waypoint>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Waypoint to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Waypoint from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Waypoint instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Waypoint fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private long roadId;
   private int laneId;
   private double s;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Waypoint() {}

  /**
   * All-args constructor.
   * @param roadId The new value for roadId
   * @param laneId The new value for laneId
   * @param s The new value for s
   */
  public Waypoint(java.lang.Long roadId, java.lang.Integer laneId, java.lang.Double s) {
    this.roadId = roadId;
    this.laneId = laneId;
    this.s = s;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return roadId;
    case 1: return laneId;
    case 2: return s;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: roadId = (java.lang.Long)value$; break;
    case 1: laneId = (java.lang.Integer)value$; break;
    case 2: s = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'roadId' field.
   * @return The value of the 'roadId' field.
   */
  public long getRoadId() {
    return roadId;
  }


  /**
   * Sets the value of the 'roadId' field.
   * @param value the value to set.
   */
  public void setRoadId(long value) {
    this.roadId = value;
  }

  /**
   * Gets the value of the 'laneId' field.
   * @return The value of the 'laneId' field.
   */
  public int getLaneId() {
    return laneId;
  }


  /**
   * Sets the value of the 'laneId' field.
   * @param value the value to set.
   */
  public void setLaneId(int value) {
    this.laneId = value;
  }

  /**
   * Gets the value of the 's' field.
   * @return The value of the 's' field.
   */
  public double getS() {
    return s;
  }


  /**
   * Sets the value of the 's' field.
   * @param value the value to set.
   */
  public void setS(double value) {
    this.s = value;
  }

  /**
   * Creates a new Waypoint RecordBuilder.
   * @return A new Waypoint RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.Waypoint.Builder newBuilder() {
    return new eu.fau.cs7.daceDS.datamodel.Waypoint.Builder();
  }

  /**
   * Creates a new Waypoint RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Waypoint RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.Waypoint.Builder newBuilder(eu.fau.cs7.daceDS.datamodel.Waypoint.Builder other) {
    if (other == null) {
      return new eu.fau.cs7.daceDS.datamodel.Waypoint.Builder();
    } else {
      return new eu.fau.cs7.daceDS.datamodel.Waypoint.Builder(other);
    }
  }

  /**
   * Creates a new Waypoint RecordBuilder by copying an existing Waypoint instance.
   * @param other The existing instance to copy.
   * @return A new Waypoint RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.Waypoint.Builder newBuilder(eu.fau.cs7.daceDS.datamodel.Waypoint other) {
    if (other == null) {
      return new eu.fau.cs7.daceDS.datamodel.Waypoint.Builder();
    } else {
      return new eu.fau.cs7.daceDS.datamodel.Waypoint.Builder(other);
    }
  }

  /**
   * RecordBuilder for Waypoint instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Waypoint>
    implements org.apache.avro.data.RecordBuilder<Waypoint> {

    private long roadId;
    private int laneId;
    private double s;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.fau.cs7.daceDS.datamodel.Waypoint.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.roadId)) {
        this.roadId = data().deepCopy(fields()[0].schema(), other.roadId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.laneId)) {
        this.laneId = data().deepCopy(fields()[1].schema(), other.laneId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.s)) {
        this.s = data().deepCopy(fields()[2].schema(), other.s);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Waypoint instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.fau.cs7.daceDS.datamodel.Waypoint other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.roadId)) {
        this.roadId = data().deepCopy(fields()[0].schema(), other.roadId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.laneId)) {
        this.laneId = data().deepCopy(fields()[1].schema(), other.laneId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.s)) {
        this.s = data().deepCopy(fields()[2].schema(), other.s);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'roadId' field.
      * @return The value.
      */
    public long getRoadId() {
      return roadId;
    }


    /**
      * Sets the value of the 'roadId' field.
      * @param value The value of 'roadId'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Waypoint.Builder setRoadId(long value) {
      validate(fields()[0], value);
      this.roadId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'roadId' field has been set.
      * @return True if the 'roadId' field has been set, false otherwise.
      */
    public boolean hasRoadId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'roadId' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Waypoint.Builder clearRoadId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'laneId' field.
      * @return The value.
      */
    public int getLaneId() {
      return laneId;
    }


    /**
      * Sets the value of the 'laneId' field.
      * @param value The value of 'laneId'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Waypoint.Builder setLaneId(int value) {
      validate(fields()[1], value);
      this.laneId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'laneId' field has been set.
      * @return True if the 'laneId' field has been set, false otherwise.
      */
    public boolean hasLaneId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'laneId' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Waypoint.Builder clearLaneId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 's' field.
      * @return The value.
      */
    public double getS() {
      return s;
    }


    /**
      * Sets the value of the 's' field.
      * @param value The value of 's'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Waypoint.Builder setS(double value) {
      validate(fields()[2], value);
      this.s = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 's' field has been set.
      * @return True if the 's' field has been set, false otherwise.
      */
    public boolean hasS() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 's' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Waypoint.Builder clearS() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Waypoint build() {
      try {
        Waypoint record = new Waypoint();
        record.roadId = fieldSetFlags()[0] ? this.roadId : (java.lang.Long) defaultValue(fields()[0]);
        record.laneId = fieldSetFlags()[1] ? this.laneId : (java.lang.Integer) defaultValue(fields()[1]);
        record.s = fieldSetFlags()[2] ? this.s : (java.lang.Double) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Waypoint>
    WRITER$ = (org.apache.avro.io.DatumWriter<Waypoint>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Waypoint>
    READER$ = (org.apache.avro.io.DatumReader<Waypoint>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.roadId);

    out.writeInt(this.laneId);

    out.writeDouble(this.s);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.roadId = in.readLong();

      this.laneId = in.readInt();

      this.s = in.readDouble();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.roadId = in.readLong();
          break;

        case 1:
          this.laneId = in.readInt();
          break;

        case 2:
          this.s = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










