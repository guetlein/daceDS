/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.fau.cs7.daceDS.datamodel;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Projector extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6503830079218625016L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Projector\",\"namespace\":\"eu.fau.cs7.daceDS.datamodel\",\"fields\":[{\"name\":\"projectorID\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"domainA\",\"type\":\"string\"},{\"name\":\"layerA\",\"type\":\"string\"},{\"name\":\"domainB\",\"type\":\"string\"},{\"name\":\"layerB\",\"type\":\"string\"},{\"name\":\"resources\",\"type\":{\"type\":\"map\",\"values\":\"string\",\"default\":{}}},{\"name\":\"parameters\",\"type\":{\"type\":\"map\",\"values\":\"string\",\"default\":{}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Projector> ENCODER =
      new BinaryMessageEncoder<Projector>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Projector> DECODER =
      new BinaryMessageDecoder<Projector>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Projector> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Projector> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Projector> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Projector>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Projector to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Projector from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Projector instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Projector fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence projectorID;
   private java.lang.CharSequence type;
   private java.lang.CharSequence domainA;
   private java.lang.CharSequence layerA;
   private java.lang.CharSequence domainB;
   private java.lang.CharSequence layerB;
   private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> resources;
   private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> parameters;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Projector() {}

  /**
   * All-args constructor.
   * @param projectorID The new value for projectorID
   * @param type The new value for type
   * @param domainA The new value for domainA
   * @param layerA The new value for layerA
   * @param domainB The new value for domainB
   * @param layerB The new value for layerB
   * @param resources The new value for resources
   * @param parameters The new value for parameters
   */
  public Projector(java.lang.CharSequence projectorID, java.lang.CharSequence type, java.lang.CharSequence domainA, java.lang.CharSequence layerA, java.lang.CharSequence domainB, java.lang.CharSequence layerB, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> resources, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> parameters) {
    this.projectorID = projectorID;
    this.type = type;
    this.domainA = domainA;
    this.layerA = layerA;
    this.domainB = domainB;
    this.layerB = layerB;
    this.resources = resources;
    this.parameters = parameters;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return projectorID;
    case 1: return type;
    case 2: return domainA;
    case 3: return layerA;
    case 4: return domainB;
    case 5: return layerB;
    case 6: return resources;
    case 7: return parameters;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: projectorID = (java.lang.CharSequence)value$; break;
    case 1: type = (java.lang.CharSequence)value$; break;
    case 2: domainA = (java.lang.CharSequence)value$; break;
    case 3: layerA = (java.lang.CharSequence)value$; break;
    case 4: domainB = (java.lang.CharSequence)value$; break;
    case 5: layerB = (java.lang.CharSequence)value$; break;
    case 6: resources = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 7: parameters = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'projectorID' field.
   * @return The value of the 'projectorID' field.
   */
  public java.lang.CharSequence getProjectorID() {
    return projectorID;
  }


  /**
   * Sets the value of the 'projectorID' field.
   * @param value the value to set.
   */
  public void setProjectorID(java.lang.CharSequence value) {
    this.projectorID = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'domainA' field.
   * @return The value of the 'domainA' field.
   */
  public java.lang.CharSequence getDomainA() {
    return domainA;
  }


  /**
   * Sets the value of the 'domainA' field.
   * @param value the value to set.
   */
  public void setDomainA(java.lang.CharSequence value) {
    this.domainA = value;
  }

  /**
   * Gets the value of the 'layerA' field.
   * @return The value of the 'layerA' field.
   */
  public java.lang.CharSequence getLayerA() {
    return layerA;
  }


  /**
   * Sets the value of the 'layerA' field.
   * @param value the value to set.
   */
  public void setLayerA(java.lang.CharSequence value) {
    this.layerA = value;
  }

  /**
   * Gets the value of the 'domainB' field.
   * @return The value of the 'domainB' field.
   */
  public java.lang.CharSequence getDomainB() {
    return domainB;
  }


  /**
   * Sets the value of the 'domainB' field.
   * @param value the value to set.
   */
  public void setDomainB(java.lang.CharSequence value) {
    this.domainB = value;
  }

  /**
   * Gets the value of the 'layerB' field.
   * @return The value of the 'layerB' field.
   */
  public java.lang.CharSequence getLayerB() {
    return layerB;
  }


  /**
   * Sets the value of the 'layerB' field.
   * @param value the value to set.
   */
  public void setLayerB(java.lang.CharSequence value) {
    this.layerB = value;
  }

  /**
   * Gets the value of the 'resources' field.
   * @return The value of the 'resources' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getResources() {
    return resources;
  }


  /**
   * Sets the value of the 'resources' field.
   * @param value the value to set.
   */
  public void setResources(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.resources = value;
  }

  /**
   * Gets the value of the 'parameters' field.
   * @return The value of the 'parameters' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getParameters() {
    return parameters;
  }


  /**
   * Sets the value of the 'parameters' field.
   * @param value the value to set.
   */
  public void setParameters(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.parameters = value;
  }

  /**
   * Creates a new Projector RecordBuilder.
   * @return A new Projector RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.Projector.Builder newBuilder() {
    return new eu.fau.cs7.daceDS.datamodel.Projector.Builder();
  }

  /**
   * Creates a new Projector RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Projector RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.Projector.Builder newBuilder(eu.fau.cs7.daceDS.datamodel.Projector.Builder other) {
    if (other == null) {
      return new eu.fau.cs7.daceDS.datamodel.Projector.Builder();
    } else {
      return new eu.fau.cs7.daceDS.datamodel.Projector.Builder(other);
    }
  }

  /**
   * Creates a new Projector RecordBuilder by copying an existing Projector instance.
   * @param other The existing instance to copy.
   * @return A new Projector RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.Projector.Builder newBuilder(eu.fau.cs7.daceDS.datamodel.Projector other) {
    if (other == null) {
      return new eu.fau.cs7.daceDS.datamodel.Projector.Builder();
    } else {
      return new eu.fau.cs7.daceDS.datamodel.Projector.Builder(other);
    }
  }

  /**
   * RecordBuilder for Projector instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Projector>
    implements org.apache.avro.data.RecordBuilder<Projector> {

    private java.lang.CharSequence projectorID;
    private java.lang.CharSequence type;
    private java.lang.CharSequence domainA;
    private java.lang.CharSequence layerA;
    private java.lang.CharSequence domainB;
    private java.lang.CharSequence layerB;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> resources;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> parameters;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.fau.cs7.daceDS.datamodel.Projector.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.projectorID)) {
        this.projectorID = data().deepCopy(fields()[0].schema(), other.projectorID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.domainA)) {
        this.domainA = data().deepCopy(fields()[2].schema(), other.domainA);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.layerA)) {
        this.layerA = data().deepCopy(fields()[3].schema(), other.layerA);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.domainB)) {
        this.domainB = data().deepCopy(fields()[4].schema(), other.domainB);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.layerB)) {
        this.layerB = data().deepCopy(fields()[5].schema(), other.layerB);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.resources)) {
        this.resources = data().deepCopy(fields()[6].schema(), other.resources);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.parameters)) {
        this.parameters = data().deepCopy(fields()[7].schema(), other.parameters);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing Projector instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.fau.cs7.daceDS.datamodel.Projector other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.projectorID)) {
        this.projectorID = data().deepCopy(fields()[0].schema(), other.projectorID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.domainA)) {
        this.domainA = data().deepCopy(fields()[2].schema(), other.domainA);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.layerA)) {
        this.layerA = data().deepCopy(fields()[3].schema(), other.layerA);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.domainB)) {
        this.domainB = data().deepCopy(fields()[4].schema(), other.domainB);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.layerB)) {
        this.layerB = data().deepCopy(fields()[5].schema(), other.layerB);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.resources)) {
        this.resources = data().deepCopy(fields()[6].schema(), other.resources);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.parameters)) {
        this.parameters = data().deepCopy(fields()[7].schema(), other.parameters);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'projectorID' field.
      * @return The value.
      */
    public java.lang.CharSequence getProjectorID() {
      return projectorID;
    }


    /**
      * Sets the value of the 'projectorID' field.
      * @param value The value of 'projectorID'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Projector.Builder setProjectorID(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.projectorID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'projectorID' field has been set.
      * @return True if the 'projectorID' field has been set, false otherwise.
      */
    public boolean hasProjectorID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'projectorID' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Projector.Builder clearProjectorID() {
      projectorID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Projector.Builder setType(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Projector.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'domainA' field.
      * @return The value.
      */
    public java.lang.CharSequence getDomainA() {
      return domainA;
    }


    /**
      * Sets the value of the 'domainA' field.
      * @param value The value of 'domainA'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Projector.Builder setDomainA(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.domainA = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'domainA' field has been set.
      * @return True if the 'domainA' field has been set, false otherwise.
      */
    public boolean hasDomainA() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'domainA' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Projector.Builder clearDomainA() {
      domainA = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'layerA' field.
      * @return The value.
      */
    public java.lang.CharSequence getLayerA() {
      return layerA;
    }


    /**
      * Sets the value of the 'layerA' field.
      * @param value The value of 'layerA'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Projector.Builder setLayerA(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.layerA = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'layerA' field has been set.
      * @return True if the 'layerA' field has been set, false otherwise.
      */
    public boolean hasLayerA() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'layerA' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Projector.Builder clearLayerA() {
      layerA = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'domainB' field.
      * @return The value.
      */
    public java.lang.CharSequence getDomainB() {
      return domainB;
    }


    /**
      * Sets the value of the 'domainB' field.
      * @param value The value of 'domainB'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Projector.Builder setDomainB(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.domainB = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'domainB' field has been set.
      * @return True if the 'domainB' field has been set, false otherwise.
      */
    public boolean hasDomainB() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'domainB' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Projector.Builder clearDomainB() {
      domainB = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'layerB' field.
      * @return The value.
      */
    public java.lang.CharSequence getLayerB() {
      return layerB;
    }


    /**
      * Sets the value of the 'layerB' field.
      * @param value The value of 'layerB'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Projector.Builder setLayerB(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.layerB = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'layerB' field has been set.
      * @return True if the 'layerB' field has been set, false otherwise.
      */
    public boolean hasLayerB() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'layerB' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Projector.Builder clearLayerB() {
      layerB = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'resources' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getResources() {
      return resources;
    }


    /**
      * Sets the value of the 'resources' field.
      * @param value The value of 'resources'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Projector.Builder setResources(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[6], value);
      this.resources = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'resources' field has been set.
      * @return True if the 'resources' field has been set, false otherwise.
      */
    public boolean hasResources() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'resources' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Projector.Builder clearResources() {
      resources = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'parameters' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getParameters() {
      return parameters;
    }


    /**
      * Sets the value of the 'parameters' field.
      * @param value The value of 'parameters'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Projector.Builder setParameters(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[7], value);
      this.parameters = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'parameters' field has been set.
      * @return True if the 'parameters' field has been set, false otherwise.
      */
    public boolean hasParameters() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'parameters' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Projector.Builder clearParameters() {
      parameters = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Projector build() {
      try {
        Projector record = new Projector();
        record.projectorID = fieldSetFlags()[0] ? this.projectorID : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.domainA = fieldSetFlags()[2] ? this.domainA : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.layerA = fieldSetFlags()[3] ? this.layerA : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.domainB = fieldSetFlags()[4] ? this.domainB : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.layerB = fieldSetFlags()[5] ? this.layerB : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.resources = fieldSetFlags()[6] ? this.resources : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[6]);
        record.parameters = fieldSetFlags()[7] ? this.parameters : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Projector>
    WRITER$ = (org.apache.avro.io.DatumWriter<Projector>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Projector>
    READER$ = (org.apache.avro.io.DatumReader<Projector>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.projectorID);

    out.writeString(this.type);

    out.writeString(this.domainA);

    out.writeString(this.layerA);

    out.writeString(this.domainB);

    out.writeString(this.layerB);

    long size0 = this.resources.size();
    out.writeMapStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, java.lang.CharSequence> e0: this.resources.entrySet()) {
      actualSize0++;
      out.startItem();
      out.writeString(e0.getKey());
      java.lang.CharSequence v0 = e0.getValue();
      out.writeString(v0);
    }
    out.writeMapEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.parameters.size();
    out.writeMapStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, java.lang.CharSequence> e1: this.parameters.entrySet()) {
      actualSize1++;
      out.startItem();
      out.writeString(e1.getKey());
      java.lang.CharSequence v1 = e1.getValue();
      out.writeString(v1);
    }
    out.writeMapEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size1 + ", but element count was " + actualSize1 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.projectorID = in.readString(this.projectorID instanceof Utf8 ? (Utf8)this.projectorID : null);

      this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);

      this.domainA = in.readString(this.domainA instanceof Utf8 ? (Utf8)this.domainA : null);

      this.layerA = in.readString(this.layerA instanceof Utf8 ? (Utf8)this.layerA : null);

      this.domainB = in.readString(this.domainB instanceof Utf8 ? (Utf8)this.domainB : null);

      this.layerB = in.readString(this.layerB instanceof Utf8 ? (Utf8)this.layerB : null);

      long size0 = in.readMapStart();
      java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m0 = this.resources; // Need fresh name due to limitation of macro system
      if (m0 == null) {
        m0 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size0);
        this.resources = m0;
      } else m0.clear();
      for ( ; 0 < size0; size0 = in.mapNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence k0 = null;
          k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
          java.lang.CharSequence v0 = null;
          v0 = in.readString(v0 instanceof Utf8 ? (Utf8)v0 : null);
          m0.put(k0, v0);
        }
      }

      long size1 = in.readMapStart();
      java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m1 = this.parameters; // Need fresh name due to limitation of macro system
      if (m1 == null) {
        m1 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size1);
        this.parameters = m1;
      } else m1.clear();
      for ( ; 0 < size1; size1 = in.mapNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.CharSequence k1 = null;
          k1 = in.readString(k1 instanceof Utf8 ? (Utf8)k1 : null);
          java.lang.CharSequence v1 = null;
          v1 = in.readString(v1 instanceof Utf8 ? (Utf8)v1 : null);
          m1.put(k1, v1);
        }
      }

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.projectorID = in.readString(this.projectorID instanceof Utf8 ? (Utf8)this.projectorID : null);
          break;

        case 1:
          this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
          break;

        case 2:
          this.domainA = in.readString(this.domainA instanceof Utf8 ? (Utf8)this.domainA : null);
          break;

        case 3:
          this.layerA = in.readString(this.layerA instanceof Utf8 ? (Utf8)this.layerA : null);
          break;

        case 4:
          this.domainB = in.readString(this.domainB instanceof Utf8 ? (Utf8)this.domainB : null);
          break;

        case 5:
          this.layerB = in.readString(this.layerB instanceof Utf8 ? (Utf8)this.layerB : null);
          break;

        case 6:
          long size0 = in.readMapStart();
          java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m0 = this.resources; // Need fresh name due to limitation of macro system
          if (m0 == null) {
            m0 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size0);
            this.resources = m0;
          } else m0.clear();
          for ( ; 0 < size0; size0 = in.mapNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence k0 = null;
              k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
              java.lang.CharSequence v0 = null;
              v0 = in.readString(v0 instanceof Utf8 ? (Utf8)v0 : null);
              m0.put(k0, v0);
            }
          }
          break;

        case 7:
          long size1 = in.readMapStart();
          java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m1 = this.parameters; // Need fresh name due to limitation of macro system
          if (m1 == null) {
            m1 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size1);
            this.parameters = m1;
          } else m1.clear();
          for ( ; 0 < size1; size1 = in.mapNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.CharSequence k1 = null;
              k1 = in.readString(k1 instanceof Utf8 ? (Utf8)k1 : null);
              java.lang.CharSequence v1 = null;
              v1 = in.readString(v1 instanceof Utf8 ? (Utf8)v1 : null);
              m1.put(k1, v1);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










