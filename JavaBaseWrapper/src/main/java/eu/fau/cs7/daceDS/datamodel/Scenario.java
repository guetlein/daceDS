/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.fau.cs7.daceDS.datamodel;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Scenario extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6444732843942682625L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Scenario\",\"namespace\":\"eu.fau.cs7.daceDS.datamodel\",\"fields\":[{\"name\":\"scenarioID\",\"type\":\"string\"},{\"name\":\"domainReferences\",\"type\":{\"type\":\"map\",\"values\":\"string\",\"default\":{}}},{\"name\":\"simulationStart\",\"type\":\"long\"},{\"name\":\"simulationEnd\",\"type\":\"long\"},{\"name\":\"execution\",\"type\":{\"type\":\"record\",\"name\":\"Execution\",\"fields\":[{\"name\":\"randomSeed\",\"type\":\"long\"},{\"name\":\"constraints\",\"type\":\"string\"},{\"name\":\"priority\",\"type\":\"long\"},{\"name\":\"syncedParticipants\",\"type\":\"long\"}]}},{\"name\":\"buildingBlocks\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"BB\",\"fields\":[{\"name\":\"instanceID\",\"type\":\"string\"},{\"name\":\"domain\",\"type\":\"string\"},{\"name\":\"layer\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"stepLength\",\"type\":\"int\"},{\"name\":\"isExternal\",\"type\":\"boolean\"},{\"name\":\"parameters\",\"type\":{\"type\":\"map\",\"values\":\"string\",\"default\":{}}},{\"name\":\"resources\",\"type\":{\"type\":\"map\",\"values\":\"string\",\"default\":{}}},{\"name\":\"results\",\"type\":{\"type\":\"map\",\"values\":\"string\",\"default\":{}}},{\"name\":\"responsibilities\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"synchronized\",\"type\":\"boolean\"},{\"name\":\"observers\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Observer\",\"fields\":[{\"name\":\"task\",\"type\":\"string\"},{\"name\":\"element\",\"type\":\"string\"},{\"name\":\"filter\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"int\"},{\"name\":\"trigger\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"}]}}}]}}},{\"name\":\"translators\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Translator\",\"fields\":[{\"name\":\"translatorID\",\"type\":\"string\"},{\"name\":\"domain\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"layerA\",\"type\":\"string\"},{\"name\":\"responsibilitiesA\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"layerB\",\"type\":\"string\"},{\"name\":\"responsibilitiesB\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"resources\",\"type\":{\"type\":\"map\",\"values\":\"string\",\"default\":{}}},{\"name\":\"parameters\",\"type\":{\"type\":\"map\",\"values\":\"string\",\"default\":{}}}]}}},{\"name\":\"projectors\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Projector\",\"fields\":[{\"name\":\"projectorID\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"domainA\",\"type\":\"string\"},{\"name\":\"layerA\",\"type\":\"string\"},{\"name\":\"domainB\",\"type\":\"string\"},{\"name\":\"layerB\",\"type\":\"string\"},{\"name\":\"resources\",\"type\":{\"type\":\"map\",\"values\":\"string\",\"default\":{}}},{\"name\":\"parameters\",\"type\":{\"type\":\"map\",\"values\":\"string\",\"default\":{}}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Scenario> ENCODER =
      new BinaryMessageEncoder<Scenario>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Scenario> DECODER =
      new BinaryMessageDecoder<Scenario>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Scenario> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Scenario> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Scenario> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Scenario>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Scenario to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Scenario from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Scenario instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Scenario fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence scenarioID;
   private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> domainReferences;
   private long simulationStart;
   private long simulationEnd;
   private eu.fau.cs7.daceDS.datamodel.Execution execution;
   private java.util.List<eu.fau.cs7.daceDS.datamodel.BB> buildingBlocks;
   private java.util.List<eu.fau.cs7.daceDS.datamodel.Translator> translators;
   private java.util.List<eu.fau.cs7.daceDS.datamodel.Projector> projectors;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Scenario() {}

  /**
   * All-args constructor.
   * @param scenarioID The new value for scenarioID
   * @param domainReferences The new value for domainReferences
   * @param simulationStart The new value for simulationStart
   * @param simulationEnd The new value for simulationEnd
   * @param execution The new value for execution
   * @param buildingBlocks The new value for buildingBlocks
   * @param translators The new value for translators
   * @param projectors The new value for projectors
   */
  public Scenario(java.lang.CharSequence scenarioID, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> domainReferences, java.lang.Long simulationStart, java.lang.Long simulationEnd, eu.fau.cs7.daceDS.datamodel.Execution execution, java.util.List<eu.fau.cs7.daceDS.datamodel.BB> buildingBlocks, java.util.List<eu.fau.cs7.daceDS.datamodel.Translator> translators, java.util.List<eu.fau.cs7.daceDS.datamodel.Projector> projectors) {
    this.scenarioID = scenarioID;
    this.domainReferences = domainReferences;
    this.simulationStart = simulationStart;
    this.simulationEnd = simulationEnd;
    this.execution = execution;
    this.buildingBlocks = buildingBlocks;
    this.translators = translators;
    this.projectors = projectors;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return scenarioID;
    case 1: return domainReferences;
    case 2: return simulationStart;
    case 3: return simulationEnd;
    case 4: return execution;
    case 5: return buildingBlocks;
    case 6: return translators;
    case 7: return projectors;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: scenarioID = (java.lang.CharSequence)value$; break;
    case 1: domainReferences = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 2: simulationStart = (java.lang.Long)value$; break;
    case 3: simulationEnd = (java.lang.Long)value$; break;
    case 4: execution = (eu.fau.cs7.daceDS.datamodel.Execution)value$; break;
    case 5: buildingBlocks = (java.util.List<eu.fau.cs7.daceDS.datamodel.BB>)value$; break;
    case 6: translators = (java.util.List<eu.fau.cs7.daceDS.datamodel.Translator>)value$; break;
    case 7: projectors = (java.util.List<eu.fau.cs7.daceDS.datamodel.Projector>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'scenarioID' field.
   * @return The value of the 'scenarioID' field.
   */
  public java.lang.CharSequence getScenarioID() {
    return scenarioID;
  }


  /**
   * Sets the value of the 'scenarioID' field.
   * @param value the value to set.
   */
  public void setScenarioID(java.lang.CharSequence value) {
    this.scenarioID = value;
  }

  /**
   * Gets the value of the 'domainReferences' field.
   * @return The value of the 'domainReferences' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getDomainReferences() {
    return domainReferences;
  }


  /**
   * Sets the value of the 'domainReferences' field.
   * @param value the value to set.
   */
  public void setDomainReferences(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.domainReferences = value;
  }

  /**
   * Gets the value of the 'simulationStart' field.
   * @return The value of the 'simulationStart' field.
   */
  public long getSimulationStart() {
    return simulationStart;
  }


  /**
   * Sets the value of the 'simulationStart' field.
   * @param value the value to set.
   */
  public void setSimulationStart(long value) {
    this.simulationStart = value;
  }

  /**
   * Gets the value of the 'simulationEnd' field.
   * @return The value of the 'simulationEnd' field.
   */
  public long getSimulationEnd() {
    return simulationEnd;
  }


  /**
   * Sets the value of the 'simulationEnd' field.
   * @param value the value to set.
   */
  public void setSimulationEnd(long value) {
    this.simulationEnd = value;
  }

  /**
   * Gets the value of the 'execution' field.
   * @return The value of the 'execution' field.
   */
  public eu.fau.cs7.daceDS.datamodel.Execution getExecution() {
    return execution;
  }


  /**
   * Sets the value of the 'execution' field.
   * @param value the value to set.
   */
  public void setExecution(eu.fau.cs7.daceDS.datamodel.Execution value) {
    this.execution = value;
  }

  /**
   * Gets the value of the 'buildingBlocks' field.
   * @return The value of the 'buildingBlocks' field.
   */
  public java.util.List<eu.fau.cs7.daceDS.datamodel.BB> getBuildingBlocks() {
    return buildingBlocks;
  }


  /**
   * Sets the value of the 'buildingBlocks' field.
   * @param value the value to set.
   */
  public void setBuildingBlocks(java.util.List<eu.fau.cs7.daceDS.datamodel.BB> value) {
    this.buildingBlocks = value;
  }

  /**
   * Gets the value of the 'translators' field.
   * @return The value of the 'translators' field.
   */
  public java.util.List<eu.fau.cs7.daceDS.datamodel.Translator> getTranslators() {
    return translators;
  }


  /**
   * Sets the value of the 'translators' field.
   * @param value the value to set.
   */
  public void setTranslators(java.util.List<eu.fau.cs7.daceDS.datamodel.Translator> value) {
    this.translators = value;
  }

  /**
   * Gets the value of the 'projectors' field.
   * @return The value of the 'projectors' field.
   */
  public java.util.List<eu.fau.cs7.daceDS.datamodel.Projector> getProjectors() {
    return projectors;
  }


  /**
   * Sets the value of the 'projectors' field.
   * @param value the value to set.
   */
  public void setProjectors(java.util.List<eu.fau.cs7.daceDS.datamodel.Projector> value) {
    this.projectors = value;
  }

  /**
   * Creates a new Scenario RecordBuilder.
   * @return A new Scenario RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.Scenario.Builder newBuilder() {
    return new eu.fau.cs7.daceDS.datamodel.Scenario.Builder();
  }

  /**
   * Creates a new Scenario RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Scenario RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.Scenario.Builder newBuilder(eu.fau.cs7.daceDS.datamodel.Scenario.Builder other) {
    if (other == null) {
      return new eu.fau.cs7.daceDS.datamodel.Scenario.Builder();
    } else {
      return new eu.fau.cs7.daceDS.datamodel.Scenario.Builder(other);
    }
  }

  /**
   * Creates a new Scenario RecordBuilder by copying an existing Scenario instance.
   * @param other The existing instance to copy.
   * @return A new Scenario RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.Scenario.Builder newBuilder(eu.fau.cs7.daceDS.datamodel.Scenario other) {
    if (other == null) {
      return new eu.fau.cs7.daceDS.datamodel.Scenario.Builder();
    } else {
      return new eu.fau.cs7.daceDS.datamodel.Scenario.Builder(other);
    }
  }

  /**
   * RecordBuilder for Scenario instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Scenario>
    implements org.apache.avro.data.RecordBuilder<Scenario> {

    private java.lang.CharSequence scenarioID;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> domainReferences;
    private long simulationStart;
    private long simulationEnd;
    private eu.fau.cs7.daceDS.datamodel.Execution execution;
    private eu.fau.cs7.daceDS.datamodel.Execution.Builder executionBuilder;
    private java.util.List<eu.fau.cs7.daceDS.datamodel.BB> buildingBlocks;
    private java.util.List<eu.fau.cs7.daceDS.datamodel.Translator> translators;
    private java.util.List<eu.fau.cs7.daceDS.datamodel.Projector> projectors;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.fau.cs7.daceDS.datamodel.Scenario.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.scenarioID)) {
        this.scenarioID = data().deepCopy(fields()[0].schema(), other.scenarioID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.domainReferences)) {
        this.domainReferences = data().deepCopy(fields()[1].schema(), other.domainReferences);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.simulationStart)) {
        this.simulationStart = data().deepCopy(fields()[2].schema(), other.simulationStart);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.simulationEnd)) {
        this.simulationEnd = data().deepCopy(fields()[3].schema(), other.simulationEnd);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.execution)) {
        this.execution = data().deepCopy(fields()[4].schema(), other.execution);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (other.hasExecutionBuilder()) {
        this.executionBuilder = eu.fau.cs7.daceDS.datamodel.Execution.newBuilder(other.getExecutionBuilder());
      }
      if (isValidValue(fields()[5], other.buildingBlocks)) {
        this.buildingBlocks = data().deepCopy(fields()[5].schema(), other.buildingBlocks);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.translators)) {
        this.translators = data().deepCopy(fields()[6].schema(), other.translators);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.projectors)) {
        this.projectors = data().deepCopy(fields()[7].schema(), other.projectors);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing Scenario instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.fau.cs7.daceDS.datamodel.Scenario other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.scenarioID)) {
        this.scenarioID = data().deepCopy(fields()[0].schema(), other.scenarioID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.domainReferences)) {
        this.domainReferences = data().deepCopy(fields()[1].schema(), other.domainReferences);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.simulationStart)) {
        this.simulationStart = data().deepCopy(fields()[2].schema(), other.simulationStart);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.simulationEnd)) {
        this.simulationEnd = data().deepCopy(fields()[3].schema(), other.simulationEnd);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.execution)) {
        this.execution = data().deepCopy(fields()[4].schema(), other.execution);
        fieldSetFlags()[4] = true;
      }
      this.executionBuilder = null;
      if (isValidValue(fields()[5], other.buildingBlocks)) {
        this.buildingBlocks = data().deepCopy(fields()[5].schema(), other.buildingBlocks);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.translators)) {
        this.translators = data().deepCopy(fields()[6].schema(), other.translators);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.projectors)) {
        this.projectors = data().deepCopy(fields()[7].schema(), other.projectors);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'scenarioID' field.
      * @return The value.
      */
    public java.lang.CharSequence getScenarioID() {
      return scenarioID;
    }


    /**
      * Sets the value of the 'scenarioID' field.
      * @param value The value of 'scenarioID'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Scenario.Builder setScenarioID(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.scenarioID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'scenarioID' field has been set.
      * @return True if the 'scenarioID' field has been set, false otherwise.
      */
    public boolean hasScenarioID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'scenarioID' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Scenario.Builder clearScenarioID() {
      scenarioID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'domainReferences' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getDomainReferences() {
      return domainReferences;
    }


    /**
      * Sets the value of the 'domainReferences' field.
      * @param value The value of 'domainReferences'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Scenario.Builder setDomainReferences(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[1], value);
      this.domainReferences = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'domainReferences' field has been set.
      * @return True if the 'domainReferences' field has been set, false otherwise.
      */
    public boolean hasDomainReferences() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'domainReferences' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Scenario.Builder clearDomainReferences() {
      domainReferences = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'simulationStart' field.
      * @return The value.
      */
    public long getSimulationStart() {
      return simulationStart;
    }


    /**
      * Sets the value of the 'simulationStart' field.
      * @param value The value of 'simulationStart'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Scenario.Builder setSimulationStart(long value) {
      validate(fields()[2], value);
      this.simulationStart = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'simulationStart' field has been set.
      * @return True if the 'simulationStart' field has been set, false otherwise.
      */
    public boolean hasSimulationStart() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'simulationStart' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Scenario.Builder clearSimulationStart() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'simulationEnd' field.
      * @return The value.
      */
    public long getSimulationEnd() {
      return simulationEnd;
    }


    /**
      * Sets the value of the 'simulationEnd' field.
      * @param value The value of 'simulationEnd'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Scenario.Builder setSimulationEnd(long value) {
      validate(fields()[3], value);
      this.simulationEnd = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'simulationEnd' field has been set.
      * @return True if the 'simulationEnd' field has been set, false otherwise.
      */
    public boolean hasSimulationEnd() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'simulationEnd' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Scenario.Builder clearSimulationEnd() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'execution' field.
      * @return The value.
      */
    public eu.fau.cs7.daceDS.datamodel.Execution getExecution() {
      return execution;
    }


    /**
      * Sets the value of the 'execution' field.
      * @param value The value of 'execution'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Scenario.Builder setExecution(eu.fau.cs7.daceDS.datamodel.Execution value) {
      validate(fields()[4], value);
      this.executionBuilder = null;
      this.execution = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'execution' field has been set.
      * @return True if the 'execution' field has been set, false otherwise.
      */
    public boolean hasExecution() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'execution' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public eu.fau.cs7.daceDS.datamodel.Execution.Builder getExecutionBuilder() {
      if (executionBuilder == null) {
        if (hasExecution()) {
          setExecutionBuilder(eu.fau.cs7.daceDS.datamodel.Execution.newBuilder(execution));
        } else {
          setExecutionBuilder(eu.fau.cs7.daceDS.datamodel.Execution.newBuilder());
        }
      }
      return executionBuilder;
    }

    /**
     * Sets the Builder instance for the 'execution' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public eu.fau.cs7.daceDS.datamodel.Scenario.Builder setExecutionBuilder(eu.fau.cs7.daceDS.datamodel.Execution.Builder value) {
      clearExecution();
      executionBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'execution' field has an active Builder instance
     * @return True if the 'execution' field has an active Builder instance
     */
    public boolean hasExecutionBuilder() {
      return executionBuilder != null;
    }

    /**
      * Clears the value of the 'execution' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Scenario.Builder clearExecution() {
      execution = null;
      executionBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'buildingBlocks' field.
      * @return The value.
      */
    public java.util.List<eu.fau.cs7.daceDS.datamodel.BB> getBuildingBlocks() {
      return buildingBlocks;
    }


    /**
      * Sets the value of the 'buildingBlocks' field.
      * @param value The value of 'buildingBlocks'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Scenario.Builder setBuildingBlocks(java.util.List<eu.fau.cs7.daceDS.datamodel.BB> value) {
      validate(fields()[5], value);
      this.buildingBlocks = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'buildingBlocks' field has been set.
      * @return True if the 'buildingBlocks' field has been set, false otherwise.
      */
    public boolean hasBuildingBlocks() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'buildingBlocks' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Scenario.Builder clearBuildingBlocks() {
      buildingBlocks = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'translators' field.
      * @return The value.
      */
    public java.util.List<eu.fau.cs7.daceDS.datamodel.Translator> getTranslators() {
      return translators;
    }


    /**
      * Sets the value of the 'translators' field.
      * @param value The value of 'translators'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Scenario.Builder setTranslators(java.util.List<eu.fau.cs7.daceDS.datamodel.Translator> value) {
      validate(fields()[6], value);
      this.translators = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'translators' field has been set.
      * @return True if the 'translators' field has been set, false otherwise.
      */
    public boolean hasTranslators() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'translators' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Scenario.Builder clearTranslators() {
      translators = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'projectors' field.
      * @return The value.
      */
    public java.util.List<eu.fau.cs7.daceDS.datamodel.Projector> getProjectors() {
      return projectors;
    }


    /**
      * Sets the value of the 'projectors' field.
      * @param value The value of 'projectors'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Scenario.Builder setProjectors(java.util.List<eu.fau.cs7.daceDS.datamodel.Projector> value) {
      validate(fields()[7], value);
      this.projectors = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'projectors' field has been set.
      * @return True if the 'projectors' field has been set, false otherwise.
      */
    public boolean hasProjectors() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'projectors' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Scenario.Builder clearProjectors() {
      projectors = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Scenario build() {
      try {
        Scenario record = new Scenario();
        record.scenarioID = fieldSetFlags()[0] ? this.scenarioID : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.domainReferences = fieldSetFlags()[1] ? this.domainReferences : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[1]);
        record.simulationStart = fieldSetFlags()[2] ? this.simulationStart : (java.lang.Long) defaultValue(fields()[2]);
        record.simulationEnd = fieldSetFlags()[3] ? this.simulationEnd : (java.lang.Long) defaultValue(fields()[3]);
        if (executionBuilder != null) {
          try {
            record.execution = this.executionBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("execution"));
            throw e;
          }
        } else {
          record.execution = fieldSetFlags()[4] ? this.execution : (eu.fau.cs7.daceDS.datamodel.Execution) defaultValue(fields()[4]);
        }
        record.buildingBlocks = fieldSetFlags()[5] ? this.buildingBlocks : (java.util.List<eu.fau.cs7.daceDS.datamodel.BB>) defaultValue(fields()[5]);
        record.translators = fieldSetFlags()[6] ? this.translators : (java.util.List<eu.fau.cs7.daceDS.datamodel.Translator>) defaultValue(fields()[6]);
        record.projectors = fieldSetFlags()[7] ? this.projectors : (java.util.List<eu.fau.cs7.daceDS.datamodel.Projector>) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Scenario>
    WRITER$ = (org.apache.avro.io.DatumWriter<Scenario>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Scenario>
    READER$ = (org.apache.avro.io.DatumReader<Scenario>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.scenarioID);

    long size0 = this.domainReferences.size();
    out.writeMapStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, java.lang.CharSequence> e0: this.domainReferences.entrySet()) {
      actualSize0++;
      out.startItem();
      out.writeString(e0.getKey());
      java.lang.CharSequence v0 = e0.getValue();
      out.writeString(v0);
    }
    out.writeMapEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeLong(this.simulationStart);

    out.writeLong(this.simulationEnd);

    this.execution.customEncode(out);

    long size1 = this.buildingBlocks.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (eu.fau.cs7.daceDS.datamodel.BB e1: this.buildingBlocks) {
      actualSize1++;
      out.startItem();
      e1.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    long size2 = this.translators.size();
    out.writeArrayStart();
    out.setItemCount(size2);
    long actualSize2 = 0;
    for (eu.fau.cs7.daceDS.datamodel.Translator e2: this.translators) {
      actualSize2++;
      out.startItem();
      e2.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");

    long size3 = this.projectors.size();
    out.writeArrayStart();
    out.setItemCount(size3);
    long actualSize3 = 0;
    for (eu.fau.cs7.daceDS.datamodel.Projector e3: this.projectors) {
      actualSize3++;
      out.startItem();
      e3.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize3 != size3)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.scenarioID = in.readString(this.scenarioID instanceof Utf8 ? (Utf8)this.scenarioID : null);

      long size0 = in.readMapStart();
      java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m0 = this.domainReferences; // Need fresh name due to limitation of macro system
      if (m0 == null) {
        m0 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size0);
        this.domainReferences = m0;
      } else m0.clear();
      for ( ; 0 < size0; size0 = in.mapNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence k0 = null;
          k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
          java.lang.CharSequence v0 = null;
          v0 = in.readString(v0 instanceof Utf8 ? (Utf8)v0 : null);
          m0.put(k0, v0);
        }
      }

      this.simulationStart = in.readLong();

      this.simulationEnd = in.readLong();

      if (this.execution == null) {
        this.execution = new eu.fau.cs7.daceDS.datamodel.Execution();
      }
      this.execution.customDecode(in);

      long size1 = in.readArrayStart();
      java.util.List<eu.fau.cs7.daceDS.datamodel.BB> a1 = this.buildingBlocks;
      if (a1 == null) {
        a1 = new SpecificData.Array<eu.fau.cs7.daceDS.datamodel.BB>((int)size1, SCHEMA$.getField("buildingBlocks").schema());
        this.buildingBlocks = a1;
      } else a1.clear();
      SpecificData.Array<eu.fau.cs7.daceDS.datamodel.BB> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<eu.fau.cs7.daceDS.datamodel.BB>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          eu.fau.cs7.daceDS.datamodel.BB e1 = (ga1 != null ? ga1.peek() : null);
          if (e1 == null) {
            e1 = new eu.fau.cs7.daceDS.datamodel.BB();
          }
          e1.customDecode(in);
          a1.add(e1);
        }
      }

      long size2 = in.readArrayStart();
      java.util.List<eu.fau.cs7.daceDS.datamodel.Translator> a2 = this.translators;
      if (a2 == null) {
        a2 = new SpecificData.Array<eu.fau.cs7.daceDS.datamodel.Translator>((int)size2, SCHEMA$.getField("translators").schema());
        this.translators = a2;
      } else a2.clear();
      SpecificData.Array<eu.fau.cs7.daceDS.datamodel.Translator> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<eu.fau.cs7.daceDS.datamodel.Translator>)a2 : null);
      for ( ; 0 < size2; size2 = in.arrayNext()) {
        for ( ; size2 != 0; size2--) {
          eu.fau.cs7.daceDS.datamodel.Translator e2 = (ga2 != null ? ga2.peek() : null);
          if (e2 == null) {
            e2 = new eu.fau.cs7.daceDS.datamodel.Translator();
          }
          e2.customDecode(in);
          a2.add(e2);
        }
      }

      long size3 = in.readArrayStart();
      java.util.List<eu.fau.cs7.daceDS.datamodel.Projector> a3 = this.projectors;
      if (a3 == null) {
        a3 = new SpecificData.Array<eu.fau.cs7.daceDS.datamodel.Projector>((int)size3, SCHEMA$.getField("projectors").schema());
        this.projectors = a3;
      } else a3.clear();
      SpecificData.Array<eu.fau.cs7.daceDS.datamodel.Projector> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<eu.fau.cs7.daceDS.datamodel.Projector>)a3 : null);
      for ( ; 0 < size3; size3 = in.arrayNext()) {
        for ( ; size3 != 0; size3--) {
          eu.fau.cs7.daceDS.datamodel.Projector e3 = (ga3 != null ? ga3.peek() : null);
          if (e3 == null) {
            e3 = new eu.fau.cs7.daceDS.datamodel.Projector();
          }
          e3.customDecode(in);
          a3.add(e3);
        }
      }

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.scenarioID = in.readString(this.scenarioID instanceof Utf8 ? (Utf8)this.scenarioID : null);
          break;

        case 1:
          long size0 = in.readMapStart();
          java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m0 = this.domainReferences; // Need fresh name due to limitation of macro system
          if (m0 == null) {
            m0 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size0);
            this.domainReferences = m0;
          } else m0.clear();
          for ( ; 0 < size0; size0 = in.mapNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence k0 = null;
              k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
              java.lang.CharSequence v0 = null;
              v0 = in.readString(v0 instanceof Utf8 ? (Utf8)v0 : null);
              m0.put(k0, v0);
            }
          }
          break;

        case 2:
          this.simulationStart = in.readLong();
          break;

        case 3:
          this.simulationEnd = in.readLong();
          break;

        case 4:
          if (this.execution == null) {
            this.execution = new eu.fau.cs7.daceDS.datamodel.Execution();
          }
          this.execution.customDecode(in);
          break;

        case 5:
          long size1 = in.readArrayStart();
          java.util.List<eu.fau.cs7.daceDS.datamodel.BB> a1 = this.buildingBlocks;
          if (a1 == null) {
            a1 = new SpecificData.Array<eu.fau.cs7.daceDS.datamodel.BB>((int)size1, SCHEMA$.getField("buildingBlocks").schema());
            this.buildingBlocks = a1;
          } else a1.clear();
          SpecificData.Array<eu.fau.cs7.daceDS.datamodel.BB> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<eu.fau.cs7.daceDS.datamodel.BB>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              eu.fau.cs7.daceDS.datamodel.BB e1 = (ga1 != null ? ga1.peek() : null);
              if (e1 == null) {
                e1 = new eu.fau.cs7.daceDS.datamodel.BB();
              }
              e1.customDecode(in);
              a1.add(e1);
            }
          }
          break;

        case 6:
          long size2 = in.readArrayStart();
          java.util.List<eu.fau.cs7.daceDS.datamodel.Translator> a2 = this.translators;
          if (a2 == null) {
            a2 = new SpecificData.Array<eu.fau.cs7.daceDS.datamodel.Translator>((int)size2, SCHEMA$.getField("translators").schema());
            this.translators = a2;
          } else a2.clear();
          SpecificData.Array<eu.fau.cs7.daceDS.datamodel.Translator> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<eu.fau.cs7.daceDS.datamodel.Translator>)a2 : null);
          for ( ; 0 < size2; size2 = in.arrayNext()) {
            for ( ; size2 != 0; size2--) {
              eu.fau.cs7.daceDS.datamodel.Translator e2 = (ga2 != null ? ga2.peek() : null);
              if (e2 == null) {
                e2 = new eu.fau.cs7.daceDS.datamodel.Translator();
              }
              e2.customDecode(in);
              a2.add(e2);
            }
          }
          break;

        case 7:
          long size3 = in.readArrayStart();
          java.util.List<eu.fau.cs7.daceDS.datamodel.Projector> a3 = this.projectors;
          if (a3 == null) {
            a3 = new SpecificData.Array<eu.fau.cs7.daceDS.datamodel.Projector>((int)size3, SCHEMA$.getField("projectors").schema());
            this.projectors = a3;
          } else a3.clear();
          SpecificData.Array<eu.fau.cs7.daceDS.datamodel.Projector> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<eu.fau.cs7.daceDS.datamodel.Projector>)a3 : null);
          for ( ; 0 < size3; size3 = in.arrayNext()) {
            for ( ; size3 != 0; size3--) {
              eu.fau.cs7.daceDS.datamodel.Projector e3 = (ga3 != null ? ga3.peek() : null);
              if (e3 == null) {
                e3 = new eu.fau.cs7.daceDS.datamodel.Projector();
              }
              e3.customDecode(in);
              a3.add(e3);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










