/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.fau.cs7.daceDS.datamodel;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Observer extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3211185582502115661L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Observer\",\"namespace\":\"eu.fau.cs7.daceDS.datamodel\",\"fields\":[{\"name\":\"task\",\"type\":\"string\"},{\"name\":\"element\",\"type\":\"string\"},{\"name\":\"filter\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"int\"},{\"name\":\"trigger\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Observer> ENCODER =
      new BinaryMessageEncoder<Observer>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Observer> DECODER =
      new BinaryMessageDecoder<Observer>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Observer> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Observer> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Observer> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Observer>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Observer to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Observer from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Observer instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Observer fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence task;
   private java.lang.CharSequence element;
   private java.lang.CharSequence filter;
   private int period;
   private java.lang.CharSequence trigger;
   private java.lang.CharSequence type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Observer() {}

  /**
   * All-args constructor.
   * @param task The new value for task
   * @param element The new value for element
   * @param filter The new value for filter
   * @param period The new value for period
   * @param trigger The new value for trigger
   * @param type The new value for type
   */
  public Observer(java.lang.CharSequence task, java.lang.CharSequence element, java.lang.CharSequence filter, java.lang.Integer period, java.lang.CharSequence trigger, java.lang.CharSequence type) {
    this.task = task;
    this.element = element;
    this.filter = filter;
    this.period = period;
    this.trigger = trigger;
    this.type = type;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return task;
    case 1: return element;
    case 2: return filter;
    case 3: return period;
    case 4: return trigger;
    case 5: return type;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: task = (java.lang.CharSequence)value$; break;
    case 1: element = (java.lang.CharSequence)value$; break;
    case 2: filter = (java.lang.CharSequence)value$; break;
    case 3: period = (java.lang.Integer)value$; break;
    case 4: trigger = (java.lang.CharSequence)value$; break;
    case 5: type = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'task' field.
   * @return The value of the 'task' field.
   */
  public java.lang.CharSequence getTask() {
    return task;
  }


  /**
   * Sets the value of the 'task' field.
   * @param value the value to set.
   */
  public void setTask(java.lang.CharSequence value) {
    this.task = value;
  }

  /**
   * Gets the value of the 'element' field.
   * @return The value of the 'element' field.
   */
  public java.lang.CharSequence getElement() {
    return element;
  }


  /**
   * Sets the value of the 'element' field.
   * @param value the value to set.
   */
  public void setElement(java.lang.CharSequence value) {
    this.element = value;
  }

  /**
   * Gets the value of the 'filter' field.
   * @return The value of the 'filter' field.
   */
  public java.lang.CharSequence getFilter() {
    return filter;
  }


  /**
   * Sets the value of the 'filter' field.
   * @param value the value to set.
   */
  public void setFilter(java.lang.CharSequence value) {
    this.filter = value;
  }

  /**
   * Gets the value of the 'period' field.
   * @return The value of the 'period' field.
   */
  public int getPeriod() {
    return period;
  }


  /**
   * Sets the value of the 'period' field.
   * @param value the value to set.
   */
  public void setPeriod(int value) {
    this.period = value;
  }

  /**
   * Gets the value of the 'trigger' field.
   * @return The value of the 'trigger' field.
   */
  public java.lang.CharSequence getTrigger() {
    return trigger;
  }


  /**
   * Sets the value of the 'trigger' field.
   * @param value the value to set.
   */
  public void setTrigger(java.lang.CharSequence value) {
    this.trigger = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Creates a new Observer RecordBuilder.
   * @return A new Observer RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.Observer.Builder newBuilder() {
    return new eu.fau.cs7.daceDS.datamodel.Observer.Builder();
  }

  /**
   * Creates a new Observer RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Observer RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.Observer.Builder newBuilder(eu.fau.cs7.daceDS.datamodel.Observer.Builder other) {
    if (other == null) {
      return new eu.fau.cs7.daceDS.datamodel.Observer.Builder();
    } else {
      return new eu.fau.cs7.daceDS.datamodel.Observer.Builder(other);
    }
  }

  /**
   * Creates a new Observer RecordBuilder by copying an existing Observer instance.
   * @param other The existing instance to copy.
   * @return A new Observer RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.Observer.Builder newBuilder(eu.fau.cs7.daceDS.datamodel.Observer other) {
    if (other == null) {
      return new eu.fau.cs7.daceDS.datamodel.Observer.Builder();
    } else {
      return new eu.fau.cs7.daceDS.datamodel.Observer.Builder(other);
    }
  }

  /**
   * RecordBuilder for Observer instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Observer>
    implements org.apache.avro.data.RecordBuilder<Observer> {

    private java.lang.CharSequence task;
    private java.lang.CharSequence element;
    private java.lang.CharSequence filter;
    private int period;
    private java.lang.CharSequence trigger;
    private java.lang.CharSequence type;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.fau.cs7.daceDS.datamodel.Observer.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.task)) {
        this.task = data().deepCopy(fields()[0].schema(), other.task);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.element)) {
        this.element = data().deepCopy(fields()[1].schema(), other.element);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.filter)) {
        this.filter = data().deepCopy(fields()[2].schema(), other.filter);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.period)) {
        this.period = data().deepCopy(fields()[3].schema(), other.period);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.trigger)) {
        this.trigger = data().deepCopy(fields()[4].schema(), other.trigger);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.type)) {
        this.type = data().deepCopy(fields()[5].schema(), other.type);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Observer instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.fau.cs7.daceDS.datamodel.Observer other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.task)) {
        this.task = data().deepCopy(fields()[0].schema(), other.task);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.element)) {
        this.element = data().deepCopy(fields()[1].schema(), other.element);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.filter)) {
        this.filter = data().deepCopy(fields()[2].schema(), other.filter);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.period)) {
        this.period = data().deepCopy(fields()[3].schema(), other.period);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.trigger)) {
        this.trigger = data().deepCopy(fields()[4].schema(), other.trigger);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.type)) {
        this.type = data().deepCopy(fields()[5].schema(), other.type);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'task' field.
      * @return The value.
      */
    public java.lang.CharSequence getTask() {
      return task;
    }


    /**
      * Sets the value of the 'task' field.
      * @param value The value of 'task'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Observer.Builder setTask(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.task = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'task' field has been set.
      * @return True if the 'task' field has been set, false otherwise.
      */
    public boolean hasTask() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'task' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Observer.Builder clearTask() {
      task = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'element' field.
      * @return The value.
      */
    public java.lang.CharSequence getElement() {
      return element;
    }


    /**
      * Sets the value of the 'element' field.
      * @param value The value of 'element'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Observer.Builder setElement(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.element = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'element' field has been set.
      * @return True if the 'element' field has been set, false otherwise.
      */
    public boolean hasElement() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'element' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Observer.Builder clearElement() {
      element = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'filter' field.
      * @return The value.
      */
    public java.lang.CharSequence getFilter() {
      return filter;
    }


    /**
      * Sets the value of the 'filter' field.
      * @param value The value of 'filter'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Observer.Builder setFilter(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.filter = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'filter' field has been set.
      * @return True if the 'filter' field has been set, false otherwise.
      */
    public boolean hasFilter() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'filter' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Observer.Builder clearFilter() {
      filter = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'period' field.
      * @return The value.
      */
    public int getPeriod() {
      return period;
    }


    /**
      * Sets the value of the 'period' field.
      * @param value The value of 'period'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Observer.Builder setPeriod(int value) {
      validate(fields()[3], value);
      this.period = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'period' field has been set.
      * @return True if the 'period' field has been set, false otherwise.
      */
    public boolean hasPeriod() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'period' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Observer.Builder clearPeriod() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'trigger' field.
      * @return The value.
      */
    public java.lang.CharSequence getTrigger() {
      return trigger;
    }


    /**
      * Sets the value of the 'trigger' field.
      * @param value The value of 'trigger'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Observer.Builder setTrigger(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.trigger = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'trigger' field has been set.
      * @return True if the 'trigger' field has been set, false otherwise.
      */
    public boolean hasTrigger() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'trigger' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Observer.Builder clearTrigger() {
      trigger = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Observer.Builder setType(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.type = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Observer.Builder clearType() {
      type = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Observer build() {
      try {
        Observer record = new Observer();
        record.task = fieldSetFlags()[0] ? this.task : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.element = fieldSetFlags()[1] ? this.element : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.filter = fieldSetFlags()[2] ? this.filter : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.period = fieldSetFlags()[3] ? this.period : (java.lang.Integer) defaultValue(fields()[3]);
        record.trigger = fieldSetFlags()[4] ? this.trigger : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.type = fieldSetFlags()[5] ? this.type : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Observer>
    WRITER$ = (org.apache.avro.io.DatumWriter<Observer>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Observer>
    READER$ = (org.apache.avro.io.DatumReader<Observer>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.task);

    out.writeString(this.element);

    out.writeString(this.filter);

    out.writeInt(this.period);

    out.writeString(this.trigger);

    out.writeString(this.type);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.task = in.readString(this.task instanceof Utf8 ? (Utf8)this.task : null);

      this.element = in.readString(this.element instanceof Utf8 ? (Utf8)this.element : null);

      this.filter = in.readString(this.filter instanceof Utf8 ? (Utf8)this.filter : null);

      this.period = in.readInt();

      this.trigger = in.readString(this.trigger instanceof Utf8 ? (Utf8)this.trigger : null);

      this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.task = in.readString(this.task instanceof Utf8 ? (Utf8)this.task : null);
          break;

        case 1:
          this.element = in.readString(this.element instanceof Utf8 ? (Utf8)this.element : null);
          break;

        case 2:
          this.filter = in.readString(this.filter instanceof Utf8 ? (Utf8)this.filter : null);
          break;

        case 3:
          this.period = in.readInt();
          break;

        case 4:
          this.trigger = in.readString(this.trigger instanceof Utf8 ? (Utf8)this.trigger : null);
          break;

        case 5:
          this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










