/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.fau.cs7.daceDS.datamodel;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Macro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 9020640217086984603L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Macro\",\"namespace\":\"eu.fau.cs7.daceDS.datamodel\",\"fields\":[{\"name\":\"linkID\",\"type\":\"string\"},{\"name\":\"allowedModes\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"capacity\",\"type\":\"double\"},{\"name\":\"density\",\"type\":\"double\"},{\"name\":\"flow\",\"type\":\"double\"},{\"name\":\"length\",\"type\":\"double\"},{\"name\":\"speed\",\"type\":\"double\"},{\"name\":\"turningProbabilities\",\"type\":{\"type\":\"map\",\"values\":\"double\",\"default\":{}}},{\"name\":\"paths\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"MacroPath\",\"fields\":[{\"name\":\"fromZone\",\"type\":\"int\"},{\"name\":\"toZone\",\"type\":\"int\"},{\"name\":\"pathID\",\"type\":\"int\"},{\"name\":\"flow\",\"type\":\"double\"},{\"name\":\"totalFlow\",\"type\":\"double\"},{\"name\":\"nodes\",\"type\":{\"type\":\"array\",\"items\":\"long\"}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Macro> ENCODER =
      new BinaryMessageEncoder<Macro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Macro> DECODER =
      new BinaryMessageDecoder<Macro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Macro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Macro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Macro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Macro>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Macro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Macro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Macro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Macro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence linkID;
   private java.util.List<java.lang.CharSequence> allowedModes;
   private double capacity;
   private double density;
   private double flow;
   private double length;
   private double speed;
   private java.util.Map<java.lang.CharSequence,java.lang.Double> turningProbabilities;
   private java.util.List<eu.fau.cs7.daceDS.datamodel.MacroPath> paths;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Macro() {}

  /**
   * All-args constructor.
   * @param linkID The new value for linkID
   * @param allowedModes The new value for allowedModes
   * @param capacity The new value for capacity
   * @param density The new value for density
   * @param flow The new value for flow
   * @param length The new value for length
   * @param speed The new value for speed
   * @param turningProbabilities The new value for turningProbabilities
   * @param paths The new value for paths
   */
  public Macro(java.lang.CharSequence linkID, java.util.List<java.lang.CharSequence> allowedModes, java.lang.Double capacity, java.lang.Double density, java.lang.Double flow, java.lang.Double length, java.lang.Double speed, java.util.Map<java.lang.CharSequence,java.lang.Double> turningProbabilities, java.util.List<eu.fau.cs7.daceDS.datamodel.MacroPath> paths) {
    this.linkID = linkID;
    this.allowedModes = allowedModes;
    this.capacity = capacity;
    this.density = density;
    this.flow = flow;
    this.length = length;
    this.speed = speed;
    this.turningProbabilities = turningProbabilities;
    this.paths = paths;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return linkID;
    case 1: return allowedModes;
    case 2: return capacity;
    case 3: return density;
    case 4: return flow;
    case 5: return length;
    case 6: return speed;
    case 7: return turningProbabilities;
    case 8: return paths;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: linkID = (java.lang.CharSequence)value$; break;
    case 1: allowedModes = (java.util.List<java.lang.CharSequence>)value$; break;
    case 2: capacity = (java.lang.Double)value$; break;
    case 3: density = (java.lang.Double)value$; break;
    case 4: flow = (java.lang.Double)value$; break;
    case 5: length = (java.lang.Double)value$; break;
    case 6: speed = (java.lang.Double)value$; break;
    case 7: turningProbabilities = (java.util.Map<java.lang.CharSequence,java.lang.Double>)value$; break;
    case 8: paths = (java.util.List<eu.fau.cs7.daceDS.datamodel.MacroPath>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'linkID' field.
   * @return The value of the 'linkID' field.
   */
  public java.lang.CharSequence getLinkID() {
    return linkID;
  }


  /**
   * Sets the value of the 'linkID' field.
   * @param value the value to set.
   */
  public void setLinkID(java.lang.CharSequence value) {
    this.linkID = value;
  }

  /**
   * Gets the value of the 'allowedModes' field.
   * @return The value of the 'allowedModes' field.
   */
  public java.util.List<java.lang.CharSequence> getAllowedModes() {
    return allowedModes;
  }


  /**
   * Sets the value of the 'allowedModes' field.
   * @param value the value to set.
   */
  public void setAllowedModes(java.util.List<java.lang.CharSequence> value) {
    this.allowedModes = value;
  }

  /**
   * Gets the value of the 'capacity' field.
   * @return The value of the 'capacity' field.
   */
  public double getCapacity() {
    return capacity;
  }


  /**
   * Sets the value of the 'capacity' field.
   * @param value the value to set.
   */
  public void setCapacity(double value) {
    this.capacity = value;
  }

  /**
   * Gets the value of the 'density' field.
   * @return The value of the 'density' field.
   */
  public double getDensity() {
    return density;
  }


  /**
   * Sets the value of the 'density' field.
   * @param value the value to set.
   */
  public void setDensity(double value) {
    this.density = value;
  }

  /**
   * Gets the value of the 'flow' field.
   * @return The value of the 'flow' field.
   */
  public double getFlow() {
    return flow;
  }


  /**
   * Sets the value of the 'flow' field.
   * @param value the value to set.
   */
  public void setFlow(double value) {
    this.flow = value;
  }

  /**
   * Gets the value of the 'length' field.
   * @return The value of the 'length' field.
   */
  public double getLength() {
    return length;
  }


  /**
   * Sets the value of the 'length' field.
   * @param value the value to set.
   */
  public void setLength(double value) {
    this.length = value;
  }

  /**
   * Gets the value of the 'speed' field.
   * @return The value of the 'speed' field.
   */
  public double getSpeed() {
    return speed;
  }


  /**
   * Sets the value of the 'speed' field.
   * @param value the value to set.
   */
  public void setSpeed(double value) {
    this.speed = value;
  }

  /**
   * Gets the value of the 'turningProbabilities' field.
   * @return The value of the 'turningProbabilities' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Double> getTurningProbabilities() {
    return turningProbabilities;
  }


  /**
   * Sets the value of the 'turningProbabilities' field.
   * @param value the value to set.
   */
  public void setTurningProbabilities(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
    this.turningProbabilities = value;
  }

  /**
   * Gets the value of the 'paths' field.
   * @return The value of the 'paths' field.
   */
  public java.util.List<eu.fau.cs7.daceDS.datamodel.MacroPath> getPaths() {
    return paths;
  }


  /**
   * Sets the value of the 'paths' field.
   * @param value the value to set.
   */
  public void setPaths(java.util.List<eu.fau.cs7.daceDS.datamodel.MacroPath> value) {
    this.paths = value;
  }

  /**
   * Creates a new Macro RecordBuilder.
   * @return A new Macro RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.Macro.Builder newBuilder() {
    return new eu.fau.cs7.daceDS.datamodel.Macro.Builder();
  }

  /**
   * Creates a new Macro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Macro RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.Macro.Builder newBuilder(eu.fau.cs7.daceDS.datamodel.Macro.Builder other) {
    if (other == null) {
      return new eu.fau.cs7.daceDS.datamodel.Macro.Builder();
    } else {
      return new eu.fau.cs7.daceDS.datamodel.Macro.Builder(other);
    }
  }

  /**
   * Creates a new Macro RecordBuilder by copying an existing Macro instance.
   * @param other The existing instance to copy.
   * @return A new Macro RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.Macro.Builder newBuilder(eu.fau.cs7.daceDS.datamodel.Macro other) {
    if (other == null) {
      return new eu.fau.cs7.daceDS.datamodel.Macro.Builder();
    } else {
      return new eu.fau.cs7.daceDS.datamodel.Macro.Builder(other);
    }
  }

  /**
   * RecordBuilder for Macro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Macro>
    implements org.apache.avro.data.RecordBuilder<Macro> {

    private java.lang.CharSequence linkID;
    private java.util.List<java.lang.CharSequence> allowedModes;
    private double capacity;
    private double density;
    private double flow;
    private double length;
    private double speed;
    private java.util.Map<java.lang.CharSequence,java.lang.Double> turningProbabilities;
    private java.util.List<eu.fau.cs7.daceDS.datamodel.MacroPath> paths;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.fau.cs7.daceDS.datamodel.Macro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.linkID)) {
        this.linkID = data().deepCopy(fields()[0].schema(), other.linkID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.allowedModes)) {
        this.allowedModes = data().deepCopy(fields()[1].schema(), other.allowedModes);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.capacity)) {
        this.capacity = data().deepCopy(fields()[2].schema(), other.capacity);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.density)) {
        this.density = data().deepCopy(fields()[3].schema(), other.density);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.flow)) {
        this.flow = data().deepCopy(fields()[4].schema(), other.flow);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.length)) {
        this.length = data().deepCopy(fields()[5].schema(), other.length);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.speed)) {
        this.speed = data().deepCopy(fields()[6].schema(), other.speed);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.turningProbabilities)) {
        this.turningProbabilities = data().deepCopy(fields()[7].schema(), other.turningProbabilities);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.paths)) {
        this.paths = data().deepCopy(fields()[8].schema(), other.paths);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing Macro instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.fau.cs7.daceDS.datamodel.Macro other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.linkID)) {
        this.linkID = data().deepCopy(fields()[0].schema(), other.linkID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.allowedModes)) {
        this.allowedModes = data().deepCopy(fields()[1].schema(), other.allowedModes);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.capacity)) {
        this.capacity = data().deepCopy(fields()[2].schema(), other.capacity);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.density)) {
        this.density = data().deepCopy(fields()[3].schema(), other.density);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.flow)) {
        this.flow = data().deepCopy(fields()[4].schema(), other.flow);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.length)) {
        this.length = data().deepCopy(fields()[5].schema(), other.length);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.speed)) {
        this.speed = data().deepCopy(fields()[6].schema(), other.speed);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.turningProbabilities)) {
        this.turningProbabilities = data().deepCopy(fields()[7].schema(), other.turningProbabilities);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.paths)) {
        this.paths = data().deepCopy(fields()[8].schema(), other.paths);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'linkID' field.
      * @return The value.
      */
    public java.lang.CharSequence getLinkID() {
      return linkID;
    }


    /**
      * Sets the value of the 'linkID' field.
      * @param value The value of 'linkID'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Macro.Builder setLinkID(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.linkID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'linkID' field has been set.
      * @return True if the 'linkID' field has been set, false otherwise.
      */
    public boolean hasLinkID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'linkID' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Macro.Builder clearLinkID() {
      linkID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'allowedModes' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getAllowedModes() {
      return allowedModes;
    }


    /**
      * Sets the value of the 'allowedModes' field.
      * @param value The value of 'allowedModes'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Macro.Builder setAllowedModes(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[1], value);
      this.allowedModes = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'allowedModes' field has been set.
      * @return True if the 'allowedModes' field has been set, false otherwise.
      */
    public boolean hasAllowedModes() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'allowedModes' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Macro.Builder clearAllowedModes() {
      allowedModes = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'capacity' field.
      * @return The value.
      */
    public double getCapacity() {
      return capacity;
    }


    /**
      * Sets the value of the 'capacity' field.
      * @param value The value of 'capacity'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Macro.Builder setCapacity(double value) {
      validate(fields()[2], value);
      this.capacity = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'capacity' field has been set.
      * @return True if the 'capacity' field has been set, false otherwise.
      */
    public boolean hasCapacity() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'capacity' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Macro.Builder clearCapacity() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'density' field.
      * @return The value.
      */
    public double getDensity() {
      return density;
    }


    /**
      * Sets the value of the 'density' field.
      * @param value The value of 'density'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Macro.Builder setDensity(double value) {
      validate(fields()[3], value);
      this.density = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'density' field has been set.
      * @return True if the 'density' field has been set, false otherwise.
      */
    public boolean hasDensity() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'density' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Macro.Builder clearDensity() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'flow' field.
      * @return The value.
      */
    public double getFlow() {
      return flow;
    }


    /**
      * Sets the value of the 'flow' field.
      * @param value The value of 'flow'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Macro.Builder setFlow(double value) {
      validate(fields()[4], value);
      this.flow = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'flow' field has been set.
      * @return True if the 'flow' field has been set, false otherwise.
      */
    public boolean hasFlow() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'flow' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Macro.Builder clearFlow() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'length' field.
      * @return The value.
      */
    public double getLength() {
      return length;
    }


    /**
      * Sets the value of the 'length' field.
      * @param value The value of 'length'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Macro.Builder setLength(double value) {
      validate(fields()[5], value);
      this.length = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'length' field has been set.
      * @return True if the 'length' field has been set, false otherwise.
      */
    public boolean hasLength() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'length' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Macro.Builder clearLength() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'speed' field.
      * @return The value.
      */
    public double getSpeed() {
      return speed;
    }


    /**
      * Sets the value of the 'speed' field.
      * @param value The value of 'speed'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Macro.Builder setSpeed(double value) {
      validate(fields()[6], value);
      this.speed = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'speed' field has been set.
      * @return True if the 'speed' field has been set, false otherwise.
      */
    public boolean hasSpeed() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'speed' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Macro.Builder clearSpeed() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'turningProbabilities' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.Double> getTurningProbabilities() {
      return turningProbabilities;
    }


    /**
      * Sets the value of the 'turningProbabilities' field.
      * @param value The value of 'turningProbabilities'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Macro.Builder setTurningProbabilities(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
      validate(fields()[7], value);
      this.turningProbabilities = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'turningProbabilities' field has been set.
      * @return True if the 'turningProbabilities' field has been set, false otherwise.
      */
    public boolean hasTurningProbabilities() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'turningProbabilities' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Macro.Builder clearTurningProbabilities() {
      turningProbabilities = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'paths' field.
      * @return The value.
      */
    public java.util.List<eu.fau.cs7.daceDS.datamodel.MacroPath> getPaths() {
      return paths;
    }


    /**
      * Sets the value of the 'paths' field.
      * @param value The value of 'paths'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Macro.Builder setPaths(java.util.List<eu.fau.cs7.daceDS.datamodel.MacroPath> value) {
      validate(fields()[8], value);
      this.paths = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'paths' field has been set.
      * @return True if the 'paths' field has been set, false otherwise.
      */
    public boolean hasPaths() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'paths' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Macro.Builder clearPaths() {
      paths = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Macro build() {
      try {
        Macro record = new Macro();
        record.linkID = fieldSetFlags()[0] ? this.linkID : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.allowedModes = fieldSetFlags()[1] ? this.allowedModes : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[1]);
        record.capacity = fieldSetFlags()[2] ? this.capacity : (java.lang.Double) defaultValue(fields()[2]);
        record.density = fieldSetFlags()[3] ? this.density : (java.lang.Double) defaultValue(fields()[3]);
        record.flow = fieldSetFlags()[4] ? this.flow : (java.lang.Double) defaultValue(fields()[4]);
        record.length = fieldSetFlags()[5] ? this.length : (java.lang.Double) defaultValue(fields()[5]);
        record.speed = fieldSetFlags()[6] ? this.speed : (java.lang.Double) defaultValue(fields()[6]);
        record.turningProbabilities = fieldSetFlags()[7] ? this.turningProbabilities : (java.util.Map<java.lang.CharSequence,java.lang.Double>) defaultValue(fields()[7]);
        record.paths = fieldSetFlags()[8] ? this.paths : (java.util.List<eu.fau.cs7.daceDS.datamodel.MacroPath>) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Macro>
    WRITER$ = (org.apache.avro.io.DatumWriter<Macro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Macro>
    READER$ = (org.apache.avro.io.DatumReader<Macro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.linkID);

    long size0 = this.allowedModes.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.allowedModes) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeDouble(this.capacity);

    out.writeDouble(this.density);

    out.writeDouble(this.flow);

    out.writeDouble(this.length);

    out.writeDouble(this.speed);

    long size1 = this.turningProbabilities.size();
    out.writeMapStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, java.lang.Double> e1: this.turningProbabilities.entrySet()) {
      actualSize1++;
      out.startItem();
      out.writeString(e1.getKey());
      java.lang.Double v1 = e1.getValue();
      out.writeDouble(v1);
    }
    out.writeMapEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    long size2 = this.paths.size();
    out.writeArrayStart();
    out.setItemCount(size2);
    long actualSize2 = 0;
    for (eu.fau.cs7.daceDS.datamodel.MacroPath e2: this.paths) {
      actualSize2++;
      out.startItem();
      e2.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.linkID = in.readString(this.linkID instanceof Utf8 ? (Utf8)this.linkID : null);

      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.allowedModes;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("allowedModes").schema());
        this.allowedModes = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

      this.capacity = in.readDouble();

      this.density = in.readDouble();

      this.flow = in.readDouble();

      this.length = in.readDouble();

      this.speed = in.readDouble();

      long size1 = in.readMapStart();
      java.util.Map<java.lang.CharSequence,java.lang.Double> m1 = this.turningProbabilities; // Need fresh name due to limitation of macro system
      if (m1 == null) {
        m1 = new java.util.HashMap<java.lang.CharSequence,java.lang.Double>((int)size1);
        this.turningProbabilities = m1;
      } else m1.clear();
      for ( ; 0 < size1; size1 = in.mapNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.CharSequence k1 = null;
          k1 = in.readString(k1 instanceof Utf8 ? (Utf8)k1 : null);
          java.lang.Double v1 = null;
          v1 = in.readDouble();
          m1.put(k1, v1);
        }
      }

      long size2 = in.readArrayStart();
      java.util.List<eu.fau.cs7.daceDS.datamodel.MacroPath> a2 = this.paths;
      if (a2 == null) {
        a2 = new SpecificData.Array<eu.fau.cs7.daceDS.datamodel.MacroPath>((int)size2, SCHEMA$.getField("paths").schema());
        this.paths = a2;
      } else a2.clear();
      SpecificData.Array<eu.fau.cs7.daceDS.datamodel.MacroPath> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<eu.fau.cs7.daceDS.datamodel.MacroPath>)a2 : null);
      for ( ; 0 < size2; size2 = in.arrayNext()) {
        for ( ; size2 != 0; size2--) {
          eu.fau.cs7.daceDS.datamodel.MacroPath e2 = (ga2 != null ? ga2.peek() : null);
          if (e2 == null) {
            e2 = new eu.fau.cs7.daceDS.datamodel.MacroPath();
          }
          e2.customDecode(in);
          a2.add(e2);
        }
      }

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.linkID = in.readString(this.linkID instanceof Utf8 ? (Utf8)this.linkID : null);
          break;

        case 1:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.allowedModes;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("allowedModes").schema());
            this.allowedModes = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        case 2:
          this.capacity = in.readDouble();
          break;

        case 3:
          this.density = in.readDouble();
          break;

        case 4:
          this.flow = in.readDouble();
          break;

        case 5:
          this.length = in.readDouble();
          break;

        case 6:
          this.speed = in.readDouble();
          break;

        case 7:
          long size1 = in.readMapStart();
          java.util.Map<java.lang.CharSequence,java.lang.Double> m1 = this.turningProbabilities; // Need fresh name due to limitation of macro system
          if (m1 == null) {
            m1 = new java.util.HashMap<java.lang.CharSequence,java.lang.Double>((int)size1);
            this.turningProbabilities = m1;
          } else m1.clear();
          for ( ; 0 < size1; size1 = in.mapNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.CharSequence k1 = null;
              k1 = in.readString(k1 instanceof Utf8 ? (Utf8)k1 : null);
              java.lang.Double v1 = null;
              v1 = in.readDouble();
              m1.put(k1, v1);
            }
          }
          break;

        case 8:
          long size2 = in.readArrayStart();
          java.util.List<eu.fau.cs7.daceDS.datamodel.MacroPath> a2 = this.paths;
          if (a2 == null) {
            a2 = new SpecificData.Array<eu.fau.cs7.daceDS.datamodel.MacroPath>((int)size2, SCHEMA$.getField("paths").schema());
            this.paths = a2;
          } else a2.clear();
          SpecificData.Array<eu.fau.cs7.daceDS.datamodel.MacroPath> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<eu.fau.cs7.daceDS.datamodel.MacroPath>)a2 : null);
          for ( ; 0 < size2; size2 = in.arrayNext()) {
            for ( ; size2 != 0; size2--) {
              eu.fau.cs7.daceDS.datamodel.MacroPath e2 = (ga2 != null ? ga2.peek() : null);
              if (e2 == null) {
                e2 = new eu.fau.cs7.daceDS.datamodel.MacroPath();
              }
              e2.customDecode(in);
              a2.add(e2);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










