/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.fau.cs7.daceDS.datamodel;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Micro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -602241397039120780L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Micro\",\"namespace\":\"eu.fau.cs7.daceDS.datamodel\",\"fields\":[{\"name\":\"vehicleID\",\"type\":\"string\"},{\"name\":\"acceleration\",\"type\":\"double\"},{\"name\":\"angle\",\"type\":\"double\"},{\"name\":\"edge\",\"type\":\"string\"},{\"name\":\"lane\",\"type\":\"int\"},{\"name\":\"position\",\"type\":{\"type\":\"record\",\"name\":\"Vec3\",\"fields\":[{\"name\":\"x\",\"type\":\"double\"},{\"name\":\"y\",\"type\":\"double\"},{\"name\":\"z\",\"type\":\"double\"}]}},{\"name\":\"positionEdge\",\"type\":\"double\"},{\"name\":\"route\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"slope\",\"type\":\"double\"},{\"name\":\"speed\",\"type\":\"double\"},{\"name\":\"type\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Micro> ENCODER =
      new BinaryMessageEncoder<Micro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Micro> DECODER =
      new BinaryMessageDecoder<Micro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Micro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Micro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Micro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Micro>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Micro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Micro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Micro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Micro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence vehicleID;
   private double acceleration;
   private double angle;
   private java.lang.CharSequence edge;
   private int lane;
   private eu.fau.cs7.daceDS.datamodel.Vec3 position;
   private double positionEdge;
   private java.util.List<java.lang.CharSequence> route;
   private double slope;
   private double speed;
   private java.lang.CharSequence type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Micro() {}

  /**
   * All-args constructor.
   * @param vehicleID The new value for vehicleID
   * @param acceleration The new value for acceleration
   * @param angle The new value for angle
   * @param edge The new value for edge
   * @param lane The new value for lane
   * @param position The new value for position
   * @param positionEdge The new value for positionEdge
   * @param route The new value for route
   * @param slope The new value for slope
   * @param speed The new value for speed
   * @param type The new value for type
   */
  public Micro(java.lang.CharSequence vehicleID, java.lang.Double acceleration, java.lang.Double angle, java.lang.CharSequence edge, java.lang.Integer lane, eu.fau.cs7.daceDS.datamodel.Vec3 position, java.lang.Double positionEdge, java.util.List<java.lang.CharSequence> route, java.lang.Double slope, java.lang.Double speed, java.lang.CharSequence type) {
    this.vehicleID = vehicleID;
    this.acceleration = acceleration;
    this.angle = angle;
    this.edge = edge;
    this.lane = lane;
    this.position = position;
    this.positionEdge = positionEdge;
    this.route = route;
    this.slope = slope;
    this.speed = speed;
    this.type = type;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return vehicleID;
    case 1: return acceleration;
    case 2: return angle;
    case 3: return edge;
    case 4: return lane;
    case 5: return position;
    case 6: return positionEdge;
    case 7: return route;
    case 8: return slope;
    case 9: return speed;
    case 10: return type;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: vehicleID = (java.lang.CharSequence)value$; break;
    case 1: acceleration = (java.lang.Double)value$; break;
    case 2: angle = (java.lang.Double)value$; break;
    case 3: edge = (java.lang.CharSequence)value$; break;
    case 4: lane = (java.lang.Integer)value$; break;
    case 5: position = (eu.fau.cs7.daceDS.datamodel.Vec3)value$; break;
    case 6: positionEdge = (java.lang.Double)value$; break;
    case 7: route = (java.util.List<java.lang.CharSequence>)value$; break;
    case 8: slope = (java.lang.Double)value$; break;
    case 9: speed = (java.lang.Double)value$; break;
    case 10: type = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'vehicleID' field.
   * @return The value of the 'vehicleID' field.
   */
  public java.lang.CharSequence getVehicleID() {
    return vehicleID;
  }


  /**
   * Sets the value of the 'vehicleID' field.
   * @param value the value to set.
   */
  public void setVehicleID(java.lang.CharSequence value) {
    this.vehicleID = value;
  }

  /**
   * Gets the value of the 'acceleration' field.
   * @return The value of the 'acceleration' field.
   */
  public double getAcceleration() {
    return acceleration;
  }


  /**
   * Sets the value of the 'acceleration' field.
   * @param value the value to set.
   */
  public void setAcceleration(double value) {
    this.acceleration = value;
  }

  /**
   * Gets the value of the 'angle' field.
   * @return The value of the 'angle' field.
   */
  public double getAngle() {
    return angle;
  }


  /**
   * Sets the value of the 'angle' field.
   * @param value the value to set.
   */
  public void setAngle(double value) {
    this.angle = value;
  }

  /**
   * Gets the value of the 'edge' field.
   * @return The value of the 'edge' field.
   */
  public java.lang.CharSequence getEdge() {
    return edge;
  }


  /**
   * Sets the value of the 'edge' field.
   * @param value the value to set.
   */
  public void setEdge(java.lang.CharSequence value) {
    this.edge = value;
  }

  /**
   * Gets the value of the 'lane' field.
   * @return The value of the 'lane' field.
   */
  public int getLane() {
    return lane;
  }


  /**
   * Sets the value of the 'lane' field.
   * @param value the value to set.
   */
  public void setLane(int value) {
    this.lane = value;
  }

  /**
   * Gets the value of the 'position' field.
   * @return The value of the 'position' field.
   */
  public eu.fau.cs7.daceDS.datamodel.Vec3 getPosition() {
    return position;
  }


  /**
   * Sets the value of the 'position' field.
   * @param value the value to set.
   */
  public void setPosition(eu.fau.cs7.daceDS.datamodel.Vec3 value) {
    this.position = value;
  }

  /**
   * Gets the value of the 'positionEdge' field.
   * @return The value of the 'positionEdge' field.
   */
  public double getPositionEdge() {
    return positionEdge;
  }


  /**
   * Sets the value of the 'positionEdge' field.
   * @param value the value to set.
   */
  public void setPositionEdge(double value) {
    this.positionEdge = value;
  }

  /**
   * Gets the value of the 'route' field.
   * @return The value of the 'route' field.
   */
  public java.util.List<java.lang.CharSequence> getRoute() {
    return route;
  }


  /**
   * Sets the value of the 'route' field.
   * @param value the value to set.
   */
  public void setRoute(java.util.List<java.lang.CharSequence> value) {
    this.route = value;
  }

  /**
   * Gets the value of the 'slope' field.
   * @return The value of the 'slope' field.
   */
  public double getSlope() {
    return slope;
  }


  /**
   * Sets the value of the 'slope' field.
   * @param value the value to set.
   */
  public void setSlope(double value) {
    this.slope = value;
  }

  /**
   * Gets the value of the 'speed' field.
   * @return The value of the 'speed' field.
   */
  public double getSpeed() {
    return speed;
  }


  /**
   * Sets the value of the 'speed' field.
   * @param value the value to set.
   */
  public void setSpeed(double value) {
    this.speed = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Creates a new Micro RecordBuilder.
   * @return A new Micro RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.Micro.Builder newBuilder() {
    return new eu.fau.cs7.daceDS.datamodel.Micro.Builder();
  }

  /**
   * Creates a new Micro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Micro RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.Micro.Builder newBuilder(eu.fau.cs7.daceDS.datamodel.Micro.Builder other) {
    if (other == null) {
      return new eu.fau.cs7.daceDS.datamodel.Micro.Builder();
    } else {
      return new eu.fau.cs7.daceDS.datamodel.Micro.Builder(other);
    }
  }

  /**
   * Creates a new Micro RecordBuilder by copying an existing Micro instance.
   * @param other The existing instance to copy.
   * @return A new Micro RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.Micro.Builder newBuilder(eu.fau.cs7.daceDS.datamodel.Micro other) {
    if (other == null) {
      return new eu.fau.cs7.daceDS.datamodel.Micro.Builder();
    } else {
      return new eu.fau.cs7.daceDS.datamodel.Micro.Builder(other);
    }
  }

  /**
   * RecordBuilder for Micro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Micro>
    implements org.apache.avro.data.RecordBuilder<Micro> {

    private java.lang.CharSequence vehicleID;
    private double acceleration;
    private double angle;
    private java.lang.CharSequence edge;
    private int lane;
    private eu.fau.cs7.daceDS.datamodel.Vec3 position;
    private eu.fau.cs7.daceDS.datamodel.Vec3.Builder positionBuilder;
    private double positionEdge;
    private java.util.List<java.lang.CharSequence> route;
    private double slope;
    private double speed;
    private java.lang.CharSequence type;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.fau.cs7.daceDS.datamodel.Micro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.vehicleID)) {
        this.vehicleID = data().deepCopy(fields()[0].schema(), other.vehicleID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.acceleration)) {
        this.acceleration = data().deepCopy(fields()[1].schema(), other.acceleration);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.angle)) {
        this.angle = data().deepCopy(fields()[2].schema(), other.angle);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.edge)) {
        this.edge = data().deepCopy(fields()[3].schema(), other.edge);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.lane)) {
        this.lane = data().deepCopy(fields()[4].schema(), other.lane);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.position)) {
        this.position = data().deepCopy(fields()[5].schema(), other.position);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasPositionBuilder()) {
        this.positionBuilder = eu.fau.cs7.daceDS.datamodel.Vec3.newBuilder(other.getPositionBuilder());
      }
      if (isValidValue(fields()[6], other.positionEdge)) {
        this.positionEdge = data().deepCopy(fields()[6].schema(), other.positionEdge);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.route)) {
        this.route = data().deepCopy(fields()[7].schema(), other.route);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.slope)) {
        this.slope = data().deepCopy(fields()[8].schema(), other.slope);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.speed)) {
        this.speed = data().deepCopy(fields()[9].schema(), other.speed);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.type)) {
        this.type = data().deepCopy(fields()[10].schema(), other.type);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
    }

    /**
     * Creates a Builder by copying an existing Micro instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.fau.cs7.daceDS.datamodel.Micro other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.vehicleID)) {
        this.vehicleID = data().deepCopy(fields()[0].schema(), other.vehicleID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.acceleration)) {
        this.acceleration = data().deepCopy(fields()[1].schema(), other.acceleration);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.angle)) {
        this.angle = data().deepCopy(fields()[2].schema(), other.angle);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.edge)) {
        this.edge = data().deepCopy(fields()[3].schema(), other.edge);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.lane)) {
        this.lane = data().deepCopy(fields()[4].schema(), other.lane);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.position)) {
        this.position = data().deepCopy(fields()[5].schema(), other.position);
        fieldSetFlags()[5] = true;
      }
      this.positionBuilder = null;
      if (isValidValue(fields()[6], other.positionEdge)) {
        this.positionEdge = data().deepCopy(fields()[6].schema(), other.positionEdge);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.route)) {
        this.route = data().deepCopy(fields()[7].schema(), other.route);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.slope)) {
        this.slope = data().deepCopy(fields()[8].schema(), other.slope);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.speed)) {
        this.speed = data().deepCopy(fields()[9].schema(), other.speed);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.type)) {
        this.type = data().deepCopy(fields()[10].schema(), other.type);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'vehicleID' field.
      * @return The value.
      */
    public java.lang.CharSequence getVehicleID() {
      return vehicleID;
    }


    /**
      * Sets the value of the 'vehicleID' field.
      * @param value The value of 'vehicleID'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Micro.Builder setVehicleID(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.vehicleID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicleID' field has been set.
      * @return True if the 'vehicleID' field has been set, false otherwise.
      */
    public boolean hasVehicleID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'vehicleID' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Micro.Builder clearVehicleID() {
      vehicleID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'acceleration' field.
      * @return The value.
      */
    public double getAcceleration() {
      return acceleration;
    }


    /**
      * Sets the value of the 'acceleration' field.
      * @param value The value of 'acceleration'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Micro.Builder setAcceleration(double value) {
      validate(fields()[1], value);
      this.acceleration = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'acceleration' field has been set.
      * @return True if the 'acceleration' field has been set, false otherwise.
      */
    public boolean hasAcceleration() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'acceleration' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Micro.Builder clearAcceleration() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'angle' field.
      * @return The value.
      */
    public double getAngle() {
      return angle;
    }


    /**
      * Sets the value of the 'angle' field.
      * @param value The value of 'angle'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Micro.Builder setAngle(double value) {
      validate(fields()[2], value);
      this.angle = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'angle' field has been set.
      * @return True if the 'angle' field has been set, false otherwise.
      */
    public boolean hasAngle() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'angle' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Micro.Builder clearAngle() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'edge' field.
      * @return The value.
      */
    public java.lang.CharSequence getEdge() {
      return edge;
    }


    /**
      * Sets the value of the 'edge' field.
      * @param value The value of 'edge'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Micro.Builder setEdge(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.edge = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'edge' field has been set.
      * @return True if the 'edge' field has been set, false otherwise.
      */
    public boolean hasEdge() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'edge' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Micro.Builder clearEdge() {
      edge = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'lane' field.
      * @return The value.
      */
    public int getLane() {
      return lane;
    }


    /**
      * Sets the value of the 'lane' field.
      * @param value The value of 'lane'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Micro.Builder setLane(int value) {
      validate(fields()[4], value);
      this.lane = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'lane' field has been set.
      * @return True if the 'lane' field has been set, false otherwise.
      */
    public boolean hasLane() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'lane' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Micro.Builder clearLane() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'position' field.
      * @return The value.
      */
    public eu.fau.cs7.daceDS.datamodel.Vec3 getPosition() {
      return position;
    }


    /**
      * Sets the value of the 'position' field.
      * @param value The value of 'position'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Micro.Builder setPosition(eu.fau.cs7.daceDS.datamodel.Vec3 value) {
      validate(fields()[5], value);
      this.positionBuilder = null;
      this.position = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'position' field has been set.
      * @return True if the 'position' field has been set, false otherwise.
      */
    public boolean hasPosition() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'position' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public eu.fau.cs7.daceDS.datamodel.Vec3.Builder getPositionBuilder() {
      if (positionBuilder == null) {
        if (hasPosition()) {
          setPositionBuilder(eu.fau.cs7.daceDS.datamodel.Vec3.newBuilder(position));
        } else {
          setPositionBuilder(eu.fau.cs7.daceDS.datamodel.Vec3.newBuilder());
        }
      }
      return positionBuilder;
    }

    /**
     * Sets the Builder instance for the 'position' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public eu.fau.cs7.daceDS.datamodel.Micro.Builder setPositionBuilder(eu.fau.cs7.daceDS.datamodel.Vec3.Builder value) {
      clearPosition();
      positionBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'position' field has an active Builder instance
     * @return True if the 'position' field has an active Builder instance
     */
    public boolean hasPositionBuilder() {
      return positionBuilder != null;
    }

    /**
      * Clears the value of the 'position' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Micro.Builder clearPosition() {
      position = null;
      positionBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'positionEdge' field.
      * @return The value.
      */
    public double getPositionEdge() {
      return positionEdge;
    }


    /**
      * Sets the value of the 'positionEdge' field.
      * @param value The value of 'positionEdge'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Micro.Builder setPositionEdge(double value) {
      validate(fields()[6], value);
      this.positionEdge = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'positionEdge' field has been set.
      * @return True if the 'positionEdge' field has been set, false otherwise.
      */
    public boolean hasPositionEdge() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'positionEdge' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Micro.Builder clearPositionEdge() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'route' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getRoute() {
      return route;
    }


    /**
      * Sets the value of the 'route' field.
      * @param value The value of 'route'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Micro.Builder setRoute(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[7], value);
      this.route = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'route' field has been set.
      * @return True if the 'route' field has been set, false otherwise.
      */
    public boolean hasRoute() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'route' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Micro.Builder clearRoute() {
      route = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'slope' field.
      * @return The value.
      */
    public double getSlope() {
      return slope;
    }


    /**
      * Sets the value of the 'slope' field.
      * @param value The value of 'slope'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Micro.Builder setSlope(double value) {
      validate(fields()[8], value);
      this.slope = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'slope' field has been set.
      * @return True if the 'slope' field has been set, false otherwise.
      */
    public boolean hasSlope() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'slope' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Micro.Builder clearSlope() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'speed' field.
      * @return The value.
      */
    public double getSpeed() {
      return speed;
    }


    /**
      * Sets the value of the 'speed' field.
      * @param value The value of 'speed'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Micro.Builder setSpeed(double value) {
      validate(fields()[9], value);
      this.speed = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'speed' field has been set.
      * @return True if the 'speed' field has been set, false otherwise.
      */
    public boolean hasSpeed() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'speed' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Micro.Builder clearSpeed() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Micro.Builder setType(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.type = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Micro.Builder clearType() {
      type = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Micro build() {
      try {
        Micro record = new Micro();
        record.vehicleID = fieldSetFlags()[0] ? this.vehicleID : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.acceleration = fieldSetFlags()[1] ? this.acceleration : (java.lang.Double) defaultValue(fields()[1]);
        record.angle = fieldSetFlags()[2] ? this.angle : (java.lang.Double) defaultValue(fields()[2]);
        record.edge = fieldSetFlags()[3] ? this.edge : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.lane = fieldSetFlags()[4] ? this.lane : (java.lang.Integer) defaultValue(fields()[4]);
        if (positionBuilder != null) {
          try {
            record.position = this.positionBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("position"));
            throw e;
          }
        } else {
          record.position = fieldSetFlags()[5] ? this.position : (eu.fau.cs7.daceDS.datamodel.Vec3) defaultValue(fields()[5]);
        }
        record.positionEdge = fieldSetFlags()[6] ? this.positionEdge : (java.lang.Double) defaultValue(fields()[6]);
        record.route = fieldSetFlags()[7] ? this.route : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[7]);
        record.slope = fieldSetFlags()[8] ? this.slope : (java.lang.Double) defaultValue(fields()[8]);
        record.speed = fieldSetFlags()[9] ? this.speed : (java.lang.Double) defaultValue(fields()[9]);
        record.type = fieldSetFlags()[10] ? this.type : (java.lang.CharSequence) defaultValue(fields()[10]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Micro>
    WRITER$ = (org.apache.avro.io.DatumWriter<Micro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Micro>
    READER$ = (org.apache.avro.io.DatumReader<Micro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.vehicleID);

    out.writeDouble(this.acceleration);

    out.writeDouble(this.angle);

    out.writeString(this.edge);

    out.writeInt(this.lane);

    this.position.customEncode(out);

    out.writeDouble(this.positionEdge);

    long size0 = this.route.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.route) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeDouble(this.slope);

    out.writeDouble(this.speed);

    out.writeString(this.type);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.vehicleID = in.readString(this.vehicleID instanceof Utf8 ? (Utf8)this.vehicleID : null);

      this.acceleration = in.readDouble();

      this.angle = in.readDouble();

      this.edge = in.readString(this.edge instanceof Utf8 ? (Utf8)this.edge : null);

      this.lane = in.readInt();

      if (this.position == null) {
        this.position = new eu.fau.cs7.daceDS.datamodel.Vec3();
      }
      this.position.customDecode(in);

      this.positionEdge = in.readDouble();

      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.route;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("route").schema());
        this.route = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

      this.slope = in.readDouble();

      this.speed = in.readDouble();

      this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);

    } else {
      for (int i = 0; i < 11; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.vehicleID = in.readString(this.vehicleID instanceof Utf8 ? (Utf8)this.vehicleID : null);
          break;

        case 1:
          this.acceleration = in.readDouble();
          break;

        case 2:
          this.angle = in.readDouble();
          break;

        case 3:
          this.edge = in.readString(this.edge instanceof Utf8 ? (Utf8)this.edge : null);
          break;

        case 4:
          this.lane = in.readInt();
          break;

        case 5:
          if (this.position == null) {
            this.position = new eu.fau.cs7.daceDS.datamodel.Vec3();
          }
          this.position.customDecode(in);
          break;

        case 6:
          this.positionEdge = in.readDouble();
          break;

        case 7:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.route;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("route").schema());
            this.route = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        case 8:
          this.slope = in.readDouble();
          break;

        case 9:
          this.speed = in.readDouble();
          break;

        case 10:
          this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










