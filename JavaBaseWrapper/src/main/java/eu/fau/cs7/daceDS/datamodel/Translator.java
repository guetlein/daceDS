/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.fau.cs7.daceDS.datamodel;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Translator extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7921373597351816651L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Translator\",\"namespace\":\"eu.fau.cs7.daceDS.datamodel\",\"fields\":[{\"name\":\"translatorID\",\"type\":\"string\"},{\"name\":\"domain\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"layerA\",\"type\":\"string\"},{\"name\":\"responsibilitiesA\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"layerB\",\"type\":\"string\"},{\"name\":\"responsibilitiesB\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"resources\",\"type\":{\"type\":\"map\",\"values\":\"string\",\"default\":{}}},{\"name\":\"parameters\",\"type\":{\"type\":\"map\",\"values\":\"string\",\"default\":{}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Translator> ENCODER =
      new BinaryMessageEncoder<Translator>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Translator> DECODER =
      new BinaryMessageDecoder<Translator>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Translator> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Translator> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Translator> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Translator>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Translator to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Translator from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Translator instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Translator fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence translatorID;
   private java.lang.CharSequence domain;
   private java.lang.CharSequence type;
   private java.lang.CharSequence layerA;
   private java.util.List<java.lang.CharSequence> responsibilitiesA;
   private java.lang.CharSequence layerB;
   private java.util.List<java.lang.CharSequence> responsibilitiesB;
   private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> resources;
   private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> parameters;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Translator() {}

  /**
   * All-args constructor.
   * @param translatorID The new value for translatorID
   * @param domain The new value for domain
   * @param type The new value for type
   * @param layerA The new value for layerA
   * @param responsibilitiesA The new value for responsibilitiesA
   * @param layerB The new value for layerB
   * @param responsibilitiesB The new value for responsibilitiesB
   * @param resources The new value for resources
   * @param parameters The new value for parameters
   */
  public Translator(java.lang.CharSequence translatorID, java.lang.CharSequence domain, java.lang.CharSequence type, java.lang.CharSequence layerA, java.util.List<java.lang.CharSequence> responsibilitiesA, java.lang.CharSequence layerB, java.util.List<java.lang.CharSequence> responsibilitiesB, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> resources, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> parameters) {
    this.translatorID = translatorID;
    this.domain = domain;
    this.type = type;
    this.layerA = layerA;
    this.responsibilitiesA = responsibilitiesA;
    this.layerB = layerB;
    this.responsibilitiesB = responsibilitiesB;
    this.resources = resources;
    this.parameters = parameters;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return translatorID;
    case 1: return domain;
    case 2: return type;
    case 3: return layerA;
    case 4: return responsibilitiesA;
    case 5: return layerB;
    case 6: return responsibilitiesB;
    case 7: return resources;
    case 8: return parameters;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: translatorID = (java.lang.CharSequence)value$; break;
    case 1: domain = (java.lang.CharSequence)value$; break;
    case 2: type = (java.lang.CharSequence)value$; break;
    case 3: layerA = (java.lang.CharSequence)value$; break;
    case 4: responsibilitiesA = (java.util.List<java.lang.CharSequence>)value$; break;
    case 5: layerB = (java.lang.CharSequence)value$; break;
    case 6: responsibilitiesB = (java.util.List<java.lang.CharSequence>)value$; break;
    case 7: resources = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 8: parameters = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'translatorID' field.
   * @return The value of the 'translatorID' field.
   */
  public java.lang.CharSequence getTranslatorID() {
    return translatorID;
  }


  /**
   * Sets the value of the 'translatorID' field.
   * @param value the value to set.
   */
  public void setTranslatorID(java.lang.CharSequence value) {
    this.translatorID = value;
  }

  /**
   * Gets the value of the 'domain' field.
   * @return The value of the 'domain' field.
   */
  public java.lang.CharSequence getDomain() {
    return domain;
  }


  /**
   * Sets the value of the 'domain' field.
   * @param value the value to set.
   */
  public void setDomain(java.lang.CharSequence value) {
    this.domain = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'layerA' field.
   * @return The value of the 'layerA' field.
   */
  public java.lang.CharSequence getLayerA() {
    return layerA;
  }


  /**
   * Sets the value of the 'layerA' field.
   * @param value the value to set.
   */
  public void setLayerA(java.lang.CharSequence value) {
    this.layerA = value;
  }

  /**
   * Gets the value of the 'responsibilitiesA' field.
   * @return The value of the 'responsibilitiesA' field.
   */
  public java.util.List<java.lang.CharSequence> getResponsibilitiesA() {
    return responsibilitiesA;
  }


  /**
   * Sets the value of the 'responsibilitiesA' field.
   * @param value the value to set.
   */
  public void setResponsibilitiesA(java.util.List<java.lang.CharSequence> value) {
    this.responsibilitiesA = value;
  }

  /**
   * Gets the value of the 'layerB' field.
   * @return The value of the 'layerB' field.
   */
  public java.lang.CharSequence getLayerB() {
    return layerB;
  }


  /**
   * Sets the value of the 'layerB' field.
   * @param value the value to set.
   */
  public void setLayerB(java.lang.CharSequence value) {
    this.layerB = value;
  }

  /**
   * Gets the value of the 'responsibilitiesB' field.
   * @return The value of the 'responsibilitiesB' field.
   */
  public java.util.List<java.lang.CharSequence> getResponsibilitiesB() {
    return responsibilitiesB;
  }


  /**
   * Sets the value of the 'responsibilitiesB' field.
   * @param value the value to set.
   */
  public void setResponsibilitiesB(java.util.List<java.lang.CharSequence> value) {
    this.responsibilitiesB = value;
  }

  /**
   * Gets the value of the 'resources' field.
   * @return The value of the 'resources' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getResources() {
    return resources;
  }


  /**
   * Sets the value of the 'resources' field.
   * @param value the value to set.
   */
  public void setResources(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.resources = value;
  }

  /**
   * Gets the value of the 'parameters' field.
   * @return The value of the 'parameters' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getParameters() {
    return parameters;
  }


  /**
   * Sets the value of the 'parameters' field.
   * @param value the value to set.
   */
  public void setParameters(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.parameters = value;
  }

  /**
   * Creates a new Translator RecordBuilder.
   * @return A new Translator RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.Translator.Builder newBuilder() {
    return new eu.fau.cs7.daceDS.datamodel.Translator.Builder();
  }

  /**
   * Creates a new Translator RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Translator RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.Translator.Builder newBuilder(eu.fau.cs7.daceDS.datamodel.Translator.Builder other) {
    if (other == null) {
      return new eu.fau.cs7.daceDS.datamodel.Translator.Builder();
    } else {
      return new eu.fau.cs7.daceDS.datamodel.Translator.Builder(other);
    }
  }

  /**
   * Creates a new Translator RecordBuilder by copying an existing Translator instance.
   * @param other The existing instance to copy.
   * @return A new Translator RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.Translator.Builder newBuilder(eu.fau.cs7.daceDS.datamodel.Translator other) {
    if (other == null) {
      return new eu.fau.cs7.daceDS.datamodel.Translator.Builder();
    } else {
      return new eu.fau.cs7.daceDS.datamodel.Translator.Builder(other);
    }
  }

  /**
   * RecordBuilder for Translator instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Translator>
    implements org.apache.avro.data.RecordBuilder<Translator> {

    private java.lang.CharSequence translatorID;
    private java.lang.CharSequence domain;
    private java.lang.CharSequence type;
    private java.lang.CharSequence layerA;
    private java.util.List<java.lang.CharSequence> responsibilitiesA;
    private java.lang.CharSequence layerB;
    private java.util.List<java.lang.CharSequence> responsibilitiesB;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> resources;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> parameters;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.fau.cs7.daceDS.datamodel.Translator.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.translatorID)) {
        this.translatorID = data().deepCopy(fields()[0].schema(), other.translatorID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.domain)) {
        this.domain = data().deepCopy(fields()[1].schema(), other.domain);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.layerA)) {
        this.layerA = data().deepCopy(fields()[3].schema(), other.layerA);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.responsibilitiesA)) {
        this.responsibilitiesA = data().deepCopy(fields()[4].schema(), other.responsibilitiesA);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.layerB)) {
        this.layerB = data().deepCopy(fields()[5].schema(), other.layerB);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.responsibilitiesB)) {
        this.responsibilitiesB = data().deepCopy(fields()[6].schema(), other.responsibilitiesB);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.resources)) {
        this.resources = data().deepCopy(fields()[7].schema(), other.resources);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.parameters)) {
        this.parameters = data().deepCopy(fields()[8].schema(), other.parameters);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing Translator instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.fau.cs7.daceDS.datamodel.Translator other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.translatorID)) {
        this.translatorID = data().deepCopy(fields()[0].schema(), other.translatorID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.domain)) {
        this.domain = data().deepCopy(fields()[1].schema(), other.domain);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.layerA)) {
        this.layerA = data().deepCopy(fields()[3].schema(), other.layerA);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.responsibilitiesA)) {
        this.responsibilitiesA = data().deepCopy(fields()[4].schema(), other.responsibilitiesA);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.layerB)) {
        this.layerB = data().deepCopy(fields()[5].schema(), other.layerB);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.responsibilitiesB)) {
        this.responsibilitiesB = data().deepCopy(fields()[6].schema(), other.responsibilitiesB);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.resources)) {
        this.resources = data().deepCopy(fields()[7].schema(), other.resources);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.parameters)) {
        this.parameters = data().deepCopy(fields()[8].schema(), other.parameters);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'translatorID' field.
      * @return The value.
      */
    public java.lang.CharSequence getTranslatorID() {
      return translatorID;
    }


    /**
      * Sets the value of the 'translatorID' field.
      * @param value The value of 'translatorID'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Translator.Builder setTranslatorID(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.translatorID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'translatorID' field has been set.
      * @return True if the 'translatorID' field has been set, false otherwise.
      */
    public boolean hasTranslatorID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'translatorID' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Translator.Builder clearTranslatorID() {
      translatorID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'domain' field.
      * @return The value.
      */
    public java.lang.CharSequence getDomain() {
      return domain;
    }


    /**
      * Sets the value of the 'domain' field.
      * @param value The value of 'domain'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Translator.Builder setDomain(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.domain = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'domain' field has been set.
      * @return True if the 'domain' field has been set, false otherwise.
      */
    public boolean hasDomain() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'domain' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Translator.Builder clearDomain() {
      domain = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Translator.Builder setType(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Translator.Builder clearType() {
      type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'layerA' field.
      * @return The value.
      */
    public java.lang.CharSequence getLayerA() {
      return layerA;
    }


    /**
      * Sets the value of the 'layerA' field.
      * @param value The value of 'layerA'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Translator.Builder setLayerA(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.layerA = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'layerA' field has been set.
      * @return True if the 'layerA' field has been set, false otherwise.
      */
    public boolean hasLayerA() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'layerA' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Translator.Builder clearLayerA() {
      layerA = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'responsibilitiesA' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getResponsibilitiesA() {
      return responsibilitiesA;
    }


    /**
      * Sets the value of the 'responsibilitiesA' field.
      * @param value The value of 'responsibilitiesA'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Translator.Builder setResponsibilitiesA(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.responsibilitiesA = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'responsibilitiesA' field has been set.
      * @return True if the 'responsibilitiesA' field has been set, false otherwise.
      */
    public boolean hasResponsibilitiesA() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'responsibilitiesA' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Translator.Builder clearResponsibilitiesA() {
      responsibilitiesA = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'layerB' field.
      * @return The value.
      */
    public java.lang.CharSequence getLayerB() {
      return layerB;
    }


    /**
      * Sets the value of the 'layerB' field.
      * @param value The value of 'layerB'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Translator.Builder setLayerB(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.layerB = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'layerB' field has been set.
      * @return True if the 'layerB' field has been set, false otherwise.
      */
    public boolean hasLayerB() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'layerB' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Translator.Builder clearLayerB() {
      layerB = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'responsibilitiesB' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getResponsibilitiesB() {
      return responsibilitiesB;
    }


    /**
      * Sets the value of the 'responsibilitiesB' field.
      * @param value The value of 'responsibilitiesB'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Translator.Builder setResponsibilitiesB(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[6], value);
      this.responsibilitiesB = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'responsibilitiesB' field has been set.
      * @return True if the 'responsibilitiesB' field has been set, false otherwise.
      */
    public boolean hasResponsibilitiesB() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'responsibilitiesB' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Translator.Builder clearResponsibilitiesB() {
      responsibilitiesB = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'resources' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getResources() {
      return resources;
    }


    /**
      * Sets the value of the 'resources' field.
      * @param value The value of 'resources'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Translator.Builder setResources(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[7], value);
      this.resources = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'resources' field has been set.
      * @return True if the 'resources' field has been set, false otherwise.
      */
    public boolean hasResources() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'resources' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Translator.Builder clearResources() {
      resources = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'parameters' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getParameters() {
      return parameters;
    }


    /**
      * Sets the value of the 'parameters' field.
      * @param value The value of 'parameters'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Translator.Builder setParameters(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[8], value);
      this.parameters = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'parameters' field has been set.
      * @return True if the 'parameters' field has been set, false otherwise.
      */
    public boolean hasParameters() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'parameters' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Translator.Builder clearParameters() {
      parameters = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Translator build() {
      try {
        Translator record = new Translator();
        record.translatorID = fieldSetFlags()[0] ? this.translatorID : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.domain = fieldSetFlags()[1] ? this.domain : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.type = fieldSetFlags()[2] ? this.type : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.layerA = fieldSetFlags()[3] ? this.layerA : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.responsibilitiesA = fieldSetFlags()[4] ? this.responsibilitiesA : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[4]);
        record.layerB = fieldSetFlags()[5] ? this.layerB : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.responsibilitiesB = fieldSetFlags()[6] ? this.responsibilitiesB : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[6]);
        record.resources = fieldSetFlags()[7] ? this.resources : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[7]);
        record.parameters = fieldSetFlags()[8] ? this.parameters : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Translator>
    WRITER$ = (org.apache.avro.io.DatumWriter<Translator>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Translator>
    READER$ = (org.apache.avro.io.DatumReader<Translator>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.translatorID);

    out.writeString(this.domain);

    out.writeString(this.type);

    out.writeString(this.layerA);

    long size0 = this.responsibilitiesA.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.responsibilitiesA) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeString(this.layerB);

    long size1 = this.responsibilitiesB.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.lang.CharSequence e1: this.responsibilitiesB) {
      actualSize1++;
      out.startItem();
      out.writeString(e1);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    long size2 = this.resources.size();
    out.writeMapStart();
    out.setItemCount(size2);
    long actualSize2 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, java.lang.CharSequence> e2: this.resources.entrySet()) {
      actualSize2++;
      out.startItem();
      out.writeString(e2.getKey());
      java.lang.CharSequence v2 = e2.getValue();
      out.writeString(v2);
    }
    out.writeMapEnd();
    if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size2 + ", but element count was " + actualSize2 + ".");

    long size3 = this.parameters.size();
    out.writeMapStart();
    out.setItemCount(size3);
    long actualSize3 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, java.lang.CharSequence> e3: this.parameters.entrySet()) {
      actualSize3++;
      out.startItem();
      out.writeString(e3.getKey());
      java.lang.CharSequence v3 = e3.getValue();
      out.writeString(v3);
    }
    out.writeMapEnd();
    if (actualSize3 != size3)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size3 + ", but element count was " + actualSize3 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.translatorID = in.readString(this.translatorID instanceof Utf8 ? (Utf8)this.translatorID : null);

      this.domain = in.readString(this.domain instanceof Utf8 ? (Utf8)this.domain : null);

      this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);

      this.layerA = in.readString(this.layerA instanceof Utf8 ? (Utf8)this.layerA : null);

      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.responsibilitiesA;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("responsibilitiesA").schema());
        this.responsibilitiesA = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

      this.layerB = in.readString(this.layerB instanceof Utf8 ? (Utf8)this.layerB : null);

      long size1 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a1 = this.responsibilitiesB;
      if (a1 == null) {
        a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("responsibilitiesB").schema());
        this.responsibilitiesB = a1;
      } else a1.clear();
      SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
          e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
          a1.add(e1);
        }
      }

      long size2 = in.readMapStart();
      java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m2 = this.resources; // Need fresh name due to limitation of macro system
      if (m2 == null) {
        m2 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size2);
        this.resources = m2;
      } else m2.clear();
      for ( ; 0 < size2; size2 = in.mapNext()) {
        for ( ; size2 != 0; size2--) {
          java.lang.CharSequence k2 = null;
          k2 = in.readString(k2 instanceof Utf8 ? (Utf8)k2 : null);
          java.lang.CharSequence v2 = null;
          v2 = in.readString(v2 instanceof Utf8 ? (Utf8)v2 : null);
          m2.put(k2, v2);
        }
      }

      long size3 = in.readMapStart();
      java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m3 = this.parameters; // Need fresh name due to limitation of macro system
      if (m3 == null) {
        m3 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size3);
        this.parameters = m3;
      } else m3.clear();
      for ( ; 0 < size3; size3 = in.mapNext()) {
        for ( ; size3 != 0; size3--) {
          java.lang.CharSequence k3 = null;
          k3 = in.readString(k3 instanceof Utf8 ? (Utf8)k3 : null);
          java.lang.CharSequence v3 = null;
          v3 = in.readString(v3 instanceof Utf8 ? (Utf8)v3 : null);
          m3.put(k3, v3);
        }
      }

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.translatorID = in.readString(this.translatorID instanceof Utf8 ? (Utf8)this.translatorID : null);
          break;

        case 1:
          this.domain = in.readString(this.domain instanceof Utf8 ? (Utf8)this.domain : null);
          break;

        case 2:
          this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
          break;

        case 3:
          this.layerA = in.readString(this.layerA instanceof Utf8 ? (Utf8)this.layerA : null);
          break;

        case 4:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.responsibilitiesA;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("responsibilitiesA").schema());
            this.responsibilitiesA = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        case 5:
          this.layerB = in.readString(this.layerB instanceof Utf8 ? (Utf8)this.layerB : null);
          break;

        case 6:
          long size1 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a1 = this.responsibilitiesB;
          if (a1 == null) {
            a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("responsibilitiesB").schema());
            this.responsibilitiesB = a1;
          } else a1.clear();
          SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
              e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
              a1.add(e1);
            }
          }
          break;

        case 7:
          long size2 = in.readMapStart();
          java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m2 = this.resources; // Need fresh name due to limitation of macro system
          if (m2 == null) {
            m2 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size2);
            this.resources = m2;
          } else m2.clear();
          for ( ; 0 < size2; size2 = in.mapNext()) {
            for ( ; size2 != 0; size2--) {
              java.lang.CharSequence k2 = null;
              k2 = in.readString(k2 instanceof Utf8 ? (Utf8)k2 : null);
              java.lang.CharSequence v2 = null;
              v2 = in.readString(v2 instanceof Utf8 ? (Utf8)v2 : null);
              m2.put(k2, v2);
            }
          }
          break;

        case 8:
          long size3 = in.readMapStart();
          java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m3 = this.parameters; // Need fresh name due to limitation of macro system
          if (m3 == null) {
            m3 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size3);
            this.parameters = m3;
          } else m3.clear();
          for ( ; 0 < size3; size3 = in.mapNext()) {
            for ( ; size3 != 0; size3--) {
              java.lang.CharSequence k3 = null;
              k3 = in.readString(k3 instanceof Utf8 ? (Utf8)k3 : null);
              java.lang.CharSequence v3 = null;
              v3 = in.readString(v3 instanceof Utf8 ? (Utf8)v3 : null);
              m3.put(k3, v3);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










