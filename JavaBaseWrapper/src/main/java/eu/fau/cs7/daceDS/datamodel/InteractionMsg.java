/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.fau.cs7.daceDS.datamodel;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class InteractionMsg extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3433260529006038164L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"InteractionMsg\",\"namespace\":\"eu.fau.cs7.daceDS.datamodel\",\"fields\":[{\"name\":\"CallID\",\"type\":\"string\"},{\"name\":\"MethodID\",\"type\":\"string\"},{\"name\":\"Input\",\"type\":{\"type\":\"map\",\"values\":\"string\"}},{\"name\":\"Output\",\"type\":{\"type\":\"map\",\"values\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<InteractionMsg> ENCODER =
      new BinaryMessageEncoder<InteractionMsg>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<InteractionMsg> DECODER =
      new BinaryMessageDecoder<InteractionMsg>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<InteractionMsg> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<InteractionMsg> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<InteractionMsg> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<InteractionMsg>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this InteractionMsg to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a InteractionMsg from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a InteractionMsg instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static InteractionMsg fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence CallID;
   private java.lang.CharSequence MethodID;
   private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> Input;
   private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> Output;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public InteractionMsg() {}

  /**
   * All-args constructor.
   * @param CallID The new value for CallID
   * @param MethodID The new value for MethodID
   * @param Input The new value for Input
   * @param Output The new value for Output
   */
  public InteractionMsg(java.lang.CharSequence CallID, java.lang.CharSequence MethodID, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> Input, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> Output) {
    this.CallID = CallID;
    this.MethodID = MethodID;
    this.Input = Input;
    this.Output = Output;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return CallID;
    case 1: return MethodID;
    case 2: return Input;
    case 3: return Output;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: CallID = (java.lang.CharSequence)value$; break;
    case 1: MethodID = (java.lang.CharSequence)value$; break;
    case 2: Input = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 3: Output = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'CallID' field.
   * @return The value of the 'CallID' field.
   */
  public java.lang.CharSequence getCallID() {
    return CallID;
  }


  /**
   * Sets the value of the 'CallID' field.
   * @param value the value to set.
   */
  public void setCallID(java.lang.CharSequence value) {
    this.CallID = value;
  }

  /**
   * Gets the value of the 'MethodID' field.
   * @return The value of the 'MethodID' field.
   */
  public java.lang.CharSequence getMethodID() {
    return MethodID;
  }


  /**
   * Sets the value of the 'MethodID' field.
   * @param value the value to set.
   */
  public void setMethodID(java.lang.CharSequence value) {
    this.MethodID = value;
  }

  /**
   * Gets the value of the 'Input' field.
   * @return The value of the 'Input' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getInput() {
    return Input;
  }


  /**
   * Sets the value of the 'Input' field.
   * @param value the value to set.
   */
  public void setInput(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.Input = value;
  }

  /**
   * Gets the value of the 'Output' field.
   * @return The value of the 'Output' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getOutput() {
    return Output;
  }


  /**
   * Sets the value of the 'Output' field.
   * @param value the value to set.
   */
  public void setOutput(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.Output = value;
  }

  /**
   * Creates a new InteractionMsg RecordBuilder.
   * @return A new InteractionMsg RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.InteractionMsg.Builder newBuilder() {
    return new eu.fau.cs7.daceDS.datamodel.InteractionMsg.Builder();
  }

  /**
   * Creates a new InteractionMsg RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new InteractionMsg RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.InteractionMsg.Builder newBuilder(eu.fau.cs7.daceDS.datamodel.InteractionMsg.Builder other) {
    if (other == null) {
      return new eu.fau.cs7.daceDS.datamodel.InteractionMsg.Builder();
    } else {
      return new eu.fau.cs7.daceDS.datamodel.InteractionMsg.Builder(other);
    }
  }

  /**
   * Creates a new InteractionMsg RecordBuilder by copying an existing InteractionMsg instance.
   * @param other The existing instance to copy.
   * @return A new InteractionMsg RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.InteractionMsg.Builder newBuilder(eu.fau.cs7.daceDS.datamodel.InteractionMsg other) {
    if (other == null) {
      return new eu.fau.cs7.daceDS.datamodel.InteractionMsg.Builder();
    } else {
      return new eu.fau.cs7.daceDS.datamodel.InteractionMsg.Builder(other);
    }
  }

  /**
   * RecordBuilder for InteractionMsg instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<InteractionMsg>
    implements org.apache.avro.data.RecordBuilder<InteractionMsg> {

    private java.lang.CharSequence CallID;
    private java.lang.CharSequence MethodID;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> Input;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> Output;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.fau.cs7.daceDS.datamodel.InteractionMsg.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.CallID)) {
        this.CallID = data().deepCopy(fields()[0].schema(), other.CallID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.MethodID)) {
        this.MethodID = data().deepCopy(fields()[1].schema(), other.MethodID);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.Input)) {
        this.Input = data().deepCopy(fields()[2].schema(), other.Input);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.Output)) {
        this.Output = data().deepCopy(fields()[3].schema(), other.Output);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing InteractionMsg instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.fau.cs7.daceDS.datamodel.InteractionMsg other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.CallID)) {
        this.CallID = data().deepCopy(fields()[0].schema(), other.CallID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.MethodID)) {
        this.MethodID = data().deepCopy(fields()[1].schema(), other.MethodID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Input)) {
        this.Input = data().deepCopy(fields()[2].schema(), other.Input);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Output)) {
        this.Output = data().deepCopy(fields()[3].schema(), other.Output);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'CallID' field.
      * @return The value.
      */
    public java.lang.CharSequence getCallID() {
      return CallID;
    }


    /**
      * Sets the value of the 'CallID' field.
      * @param value The value of 'CallID'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.InteractionMsg.Builder setCallID(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.CallID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'CallID' field has been set.
      * @return True if the 'CallID' field has been set, false otherwise.
      */
    public boolean hasCallID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'CallID' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.InteractionMsg.Builder clearCallID() {
      CallID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'MethodID' field.
      * @return The value.
      */
    public java.lang.CharSequence getMethodID() {
      return MethodID;
    }


    /**
      * Sets the value of the 'MethodID' field.
      * @param value The value of 'MethodID'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.InteractionMsg.Builder setMethodID(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.MethodID = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'MethodID' field has been set.
      * @return True if the 'MethodID' field has been set, false otherwise.
      */
    public boolean hasMethodID() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'MethodID' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.InteractionMsg.Builder clearMethodID() {
      MethodID = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'Input' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getInput() {
      return Input;
    }


    /**
      * Sets the value of the 'Input' field.
      * @param value The value of 'Input'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.InteractionMsg.Builder setInput(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.Input = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'Input' field has been set.
      * @return True if the 'Input' field has been set, false otherwise.
      */
    public boolean hasInput() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'Input' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.InteractionMsg.Builder clearInput() {
      Input = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'Output' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getOutput() {
      return Output;
    }


    /**
      * Sets the value of the 'Output' field.
      * @param value The value of 'Output'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.InteractionMsg.Builder setOutput(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.Output = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'Output' field has been set.
      * @return True if the 'Output' field has been set, false otherwise.
      */
    public boolean hasOutput() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'Output' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.InteractionMsg.Builder clearOutput() {
      Output = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public InteractionMsg build() {
      try {
        InteractionMsg record = new InteractionMsg();
        record.CallID = fieldSetFlags()[0] ? this.CallID : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.MethodID = fieldSetFlags()[1] ? this.MethodID : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.Input = fieldSetFlags()[2] ? this.Input : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[2]);
        record.Output = fieldSetFlags()[3] ? this.Output : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<InteractionMsg>
    WRITER$ = (org.apache.avro.io.DatumWriter<InteractionMsg>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<InteractionMsg>
    READER$ = (org.apache.avro.io.DatumReader<InteractionMsg>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.CallID);

    out.writeString(this.MethodID);

    long size0 = this.Input.size();
    out.writeMapStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, java.lang.CharSequence> e0: this.Input.entrySet()) {
      actualSize0++;
      out.startItem();
      out.writeString(e0.getKey());
      java.lang.CharSequence v0 = e0.getValue();
      out.writeString(v0);
    }
    out.writeMapEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.Output.size();
    out.writeMapStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, java.lang.CharSequence> e1: this.Output.entrySet()) {
      actualSize1++;
      out.startItem();
      out.writeString(e1.getKey());
      java.lang.CharSequence v1 = e1.getValue();
      out.writeString(v1);
    }
    out.writeMapEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size1 + ", but element count was " + actualSize1 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.CallID = in.readString(this.CallID instanceof Utf8 ? (Utf8)this.CallID : null);

      this.MethodID = in.readString(this.MethodID instanceof Utf8 ? (Utf8)this.MethodID : null);

      long size0 = in.readMapStart();
      java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m0 = this.Input; // Need fresh name due to limitation of macro system
      if (m0 == null) {
        m0 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size0);
        this.Input = m0;
      } else m0.clear();
      for ( ; 0 < size0; size0 = in.mapNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence k0 = null;
          k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
          java.lang.CharSequence v0 = null;
          v0 = in.readString(v0 instanceof Utf8 ? (Utf8)v0 : null);
          m0.put(k0, v0);
        }
      }

      long size1 = in.readMapStart();
      java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m1 = this.Output; // Need fresh name due to limitation of macro system
      if (m1 == null) {
        m1 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size1);
        this.Output = m1;
      } else m1.clear();
      for ( ; 0 < size1; size1 = in.mapNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.CharSequence k1 = null;
          k1 = in.readString(k1 instanceof Utf8 ? (Utf8)k1 : null);
          java.lang.CharSequence v1 = null;
          v1 = in.readString(v1 instanceof Utf8 ? (Utf8)v1 : null);
          m1.put(k1, v1);
        }
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.CallID = in.readString(this.CallID instanceof Utf8 ? (Utf8)this.CallID : null);
          break;

        case 1:
          this.MethodID = in.readString(this.MethodID instanceof Utf8 ? (Utf8)this.MethodID : null);
          break;

        case 2:
          long size0 = in.readMapStart();
          java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m0 = this.Input; // Need fresh name due to limitation of macro system
          if (m0 == null) {
            m0 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size0);
            this.Input = m0;
          } else m0.clear();
          for ( ; 0 < size0; size0 = in.mapNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence k0 = null;
              k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
              java.lang.CharSequence v0 = null;
              v0 = in.readString(v0 instanceof Utf8 ? (Utf8)v0 : null);
              m0.put(k0, v0);
            }
          }
          break;

        case 3:
          long size1 = in.readMapStart();
          java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m1 = this.Output; // Need fresh name due to limitation of macro system
          if (m1 == null) {
            m1 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size1);
            this.Output = m1;
          } else m1.clear();
          for ( ; 0 < size1; size1 = in.mapNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.CharSequence k1 = null;
              k1 = in.readString(k1 instanceof Utf8 ? (Utf8)k1 : null);
              java.lang.CharSequence v1 = null;
              v1 = in.readString(v1 instanceof Utf8 ? (Utf8)v1 : null);
              m1.put(k1, v1);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










