/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.fau.cs7.daceDS.datamodel;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Execution extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7387994521659588079L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Execution\",\"namespace\":\"eu.fau.cs7.daceDS.datamodel\",\"fields\":[{\"name\":\"randomSeed\",\"type\":\"long\"},{\"name\":\"constraints\",\"type\":\"string\"},{\"name\":\"priority\",\"type\":\"long\"},{\"name\":\"syncedParticipants\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Execution> ENCODER =
      new BinaryMessageEncoder<Execution>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Execution> DECODER =
      new BinaryMessageDecoder<Execution>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Execution> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Execution> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Execution> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Execution>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Execution to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Execution from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Execution instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Execution fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private long randomSeed;
   private java.lang.CharSequence constraints;
   private long priority;
   private long syncedParticipants;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Execution() {}

  /**
   * All-args constructor.
   * @param randomSeed The new value for randomSeed
   * @param constraints The new value for constraints
   * @param priority The new value for priority
   * @param syncedParticipants The new value for syncedParticipants
   */
  public Execution(java.lang.Long randomSeed, java.lang.CharSequence constraints, java.lang.Long priority, java.lang.Long syncedParticipants) {
    this.randomSeed = randomSeed;
    this.constraints = constraints;
    this.priority = priority;
    this.syncedParticipants = syncedParticipants;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return randomSeed;
    case 1: return constraints;
    case 2: return priority;
    case 3: return syncedParticipants;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: randomSeed = (java.lang.Long)value$; break;
    case 1: constraints = (java.lang.CharSequence)value$; break;
    case 2: priority = (java.lang.Long)value$; break;
    case 3: syncedParticipants = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'randomSeed' field.
   * @return The value of the 'randomSeed' field.
   */
  public long getRandomSeed() {
    return randomSeed;
  }


  /**
   * Sets the value of the 'randomSeed' field.
   * @param value the value to set.
   */
  public void setRandomSeed(long value) {
    this.randomSeed = value;
  }

  /**
   * Gets the value of the 'constraints' field.
   * @return The value of the 'constraints' field.
   */
  public java.lang.CharSequence getConstraints() {
    return constraints;
  }


  /**
   * Sets the value of the 'constraints' field.
   * @param value the value to set.
   */
  public void setConstraints(java.lang.CharSequence value) {
    this.constraints = value;
  }

  /**
   * Gets the value of the 'priority' field.
   * @return The value of the 'priority' field.
   */
  public long getPriority() {
    return priority;
  }


  /**
   * Sets the value of the 'priority' field.
   * @param value the value to set.
   */
  public void setPriority(long value) {
    this.priority = value;
  }

  /**
   * Gets the value of the 'syncedParticipants' field.
   * @return The value of the 'syncedParticipants' field.
   */
  public long getSyncedParticipants() {
    return syncedParticipants;
  }


  /**
   * Sets the value of the 'syncedParticipants' field.
   * @param value the value to set.
   */
  public void setSyncedParticipants(long value) {
    this.syncedParticipants = value;
  }

  /**
   * Creates a new Execution RecordBuilder.
   * @return A new Execution RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.Execution.Builder newBuilder() {
    return new eu.fau.cs7.daceDS.datamodel.Execution.Builder();
  }

  /**
   * Creates a new Execution RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Execution RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.Execution.Builder newBuilder(eu.fau.cs7.daceDS.datamodel.Execution.Builder other) {
    if (other == null) {
      return new eu.fau.cs7.daceDS.datamodel.Execution.Builder();
    } else {
      return new eu.fau.cs7.daceDS.datamodel.Execution.Builder(other);
    }
  }

  /**
   * Creates a new Execution RecordBuilder by copying an existing Execution instance.
   * @param other The existing instance to copy.
   * @return A new Execution RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.Execution.Builder newBuilder(eu.fau.cs7.daceDS.datamodel.Execution other) {
    if (other == null) {
      return new eu.fau.cs7.daceDS.datamodel.Execution.Builder();
    } else {
      return new eu.fau.cs7.daceDS.datamodel.Execution.Builder(other);
    }
  }

  /**
   * RecordBuilder for Execution instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Execution>
    implements org.apache.avro.data.RecordBuilder<Execution> {

    private long randomSeed;
    private java.lang.CharSequence constraints;
    private long priority;
    private long syncedParticipants;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.fau.cs7.daceDS.datamodel.Execution.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.randomSeed)) {
        this.randomSeed = data().deepCopy(fields()[0].schema(), other.randomSeed);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.constraints)) {
        this.constraints = data().deepCopy(fields()[1].schema(), other.constraints);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.priority)) {
        this.priority = data().deepCopy(fields()[2].schema(), other.priority);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.syncedParticipants)) {
        this.syncedParticipants = data().deepCopy(fields()[3].schema(), other.syncedParticipants);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Execution instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.fau.cs7.daceDS.datamodel.Execution other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.randomSeed)) {
        this.randomSeed = data().deepCopy(fields()[0].schema(), other.randomSeed);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.constraints)) {
        this.constraints = data().deepCopy(fields()[1].schema(), other.constraints);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.priority)) {
        this.priority = data().deepCopy(fields()[2].schema(), other.priority);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.syncedParticipants)) {
        this.syncedParticipants = data().deepCopy(fields()[3].schema(), other.syncedParticipants);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'randomSeed' field.
      * @return The value.
      */
    public long getRandomSeed() {
      return randomSeed;
    }


    /**
      * Sets the value of the 'randomSeed' field.
      * @param value The value of 'randomSeed'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Execution.Builder setRandomSeed(long value) {
      validate(fields()[0], value);
      this.randomSeed = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'randomSeed' field has been set.
      * @return True if the 'randomSeed' field has been set, false otherwise.
      */
    public boolean hasRandomSeed() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'randomSeed' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Execution.Builder clearRandomSeed() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'constraints' field.
      * @return The value.
      */
    public java.lang.CharSequence getConstraints() {
      return constraints;
    }


    /**
      * Sets the value of the 'constraints' field.
      * @param value The value of 'constraints'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Execution.Builder setConstraints(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.constraints = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'constraints' field has been set.
      * @return True if the 'constraints' field has been set, false otherwise.
      */
    public boolean hasConstraints() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'constraints' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Execution.Builder clearConstraints() {
      constraints = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'priority' field.
      * @return The value.
      */
    public long getPriority() {
      return priority;
    }


    /**
      * Sets the value of the 'priority' field.
      * @param value The value of 'priority'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Execution.Builder setPriority(long value) {
      validate(fields()[2], value);
      this.priority = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'priority' field has been set.
      * @return True if the 'priority' field has been set, false otherwise.
      */
    public boolean hasPriority() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'priority' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Execution.Builder clearPriority() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'syncedParticipants' field.
      * @return The value.
      */
    public long getSyncedParticipants() {
      return syncedParticipants;
    }


    /**
      * Sets the value of the 'syncedParticipants' field.
      * @param value The value of 'syncedParticipants'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Execution.Builder setSyncedParticipants(long value) {
      validate(fields()[3], value);
      this.syncedParticipants = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'syncedParticipants' field has been set.
      * @return True if the 'syncedParticipants' field has been set, false otherwise.
      */
    public boolean hasSyncedParticipants() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'syncedParticipants' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Execution.Builder clearSyncedParticipants() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Execution build() {
      try {
        Execution record = new Execution();
        record.randomSeed = fieldSetFlags()[0] ? this.randomSeed : (java.lang.Long) defaultValue(fields()[0]);
        record.constraints = fieldSetFlags()[1] ? this.constraints : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.priority = fieldSetFlags()[2] ? this.priority : (java.lang.Long) defaultValue(fields()[2]);
        record.syncedParticipants = fieldSetFlags()[3] ? this.syncedParticipants : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Execution>
    WRITER$ = (org.apache.avro.io.DatumWriter<Execution>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Execution>
    READER$ = (org.apache.avro.io.DatumReader<Execution>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.randomSeed);

    out.writeString(this.constraints);

    out.writeLong(this.priority);

    out.writeLong(this.syncedParticipants);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.randomSeed = in.readLong();

      this.constraints = in.readString(this.constraints instanceof Utf8 ? (Utf8)this.constraints : null);

      this.priority = in.readLong();

      this.syncedParticipants = in.readLong();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.randomSeed = in.readLong();
          break;

        case 1:
          this.constraints = in.readString(this.constraints instanceof Utf8 ? (Utf8)this.constraints : null);
          break;

        case 2:
          this.priority = in.readLong();
          break;

        case 3:
          this.syncedParticipants = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










