/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.fau.cs7.daceDS.datamodel;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SubMicro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4619748263459789720L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SubMicro\",\"namespace\":\"eu.fau.cs7.daceDS.datamodel\",\"fields\":[{\"name\":\"vehicleID\",\"type\":\"string\"},{\"name\":\"acceleration\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Vec3\",\"fields\":[{\"name\":\"x\",\"type\":\"double\"},{\"name\":\"y\",\"type\":\"double\"},{\"name\":\"z\",\"type\":\"double\"}]}]},{\"name\":\"position\",\"type\":[\"null\",\"Vec3\"]},{\"name\":\"rotation\",\"type\":[\"null\",\"Vec3\"]},{\"name\":\"road\",\"type\":[\"null\",\"long\"]},{\"name\":\"lane\",\"type\":[\"null\",\"int\"]},{\"name\":\"route\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Waypoint\",\"fields\":[{\"name\":\"roadId\",\"type\":\"long\"},{\"name\":\"laneId\",\"type\":\"int\"},{\"name\":\"s\",\"type\":\"double\"}]}}]},{\"name\":\"sensor\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Sensor\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"data\",\"type\":{\"type\":\"array\",\"items\":[\"boolean\",\"bytes\",\"double\",\"int\",\"string\"]}}]}}]},{\"name\":\"type\",\"type\":[\"null\",\"string\"]},{\"name\":\"velocity\",\"type\":[\"null\",\"Vec3\"]},{\"name\":\"speed\",\"type\":[\"null\",\"double\"]},{\"name\":\"throttle\",\"type\":[\"null\",\"double\"]},{\"name\":\"steer\",\"type\":[\"null\",\"double\"]},{\"name\":\"brake\",\"type\":[\"null\",\"double\"]},{\"name\":\"gear\",\"type\":[\"null\",\"double\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SubMicro> ENCODER =
      new BinaryMessageEncoder<SubMicro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SubMicro> DECODER =
      new BinaryMessageDecoder<SubMicro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SubMicro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SubMicro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SubMicro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SubMicro>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SubMicro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SubMicro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SubMicro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SubMicro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence vehicleID;
   private eu.fau.cs7.daceDS.datamodel.Vec3 acceleration;
   private eu.fau.cs7.daceDS.datamodel.Vec3 position;
   private eu.fau.cs7.daceDS.datamodel.Vec3 rotation;
   private java.lang.Long road;
   private java.lang.Integer lane;
   private java.util.List<eu.fau.cs7.daceDS.datamodel.Waypoint> route;
   private java.util.List<eu.fau.cs7.daceDS.datamodel.Sensor> sensor;
   private java.lang.CharSequence type;
   private eu.fau.cs7.daceDS.datamodel.Vec3 velocity;
   private java.lang.Double speed;
   private java.lang.Double throttle;
   private java.lang.Double steer;
   private java.lang.Double brake;
   private java.lang.Double gear;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SubMicro() {}

  /**
   * All-args constructor.
   * @param vehicleID The new value for vehicleID
   * @param acceleration The new value for acceleration
   * @param position The new value for position
   * @param rotation The new value for rotation
   * @param road The new value for road
   * @param lane The new value for lane
   * @param route The new value for route
   * @param sensor The new value for sensor
   * @param type The new value for type
   * @param velocity The new value for velocity
   * @param speed The new value for speed
   * @param throttle The new value for throttle
   * @param steer The new value for steer
   * @param brake The new value for brake
   * @param gear The new value for gear
   */
  public SubMicro(java.lang.CharSequence vehicleID, eu.fau.cs7.daceDS.datamodel.Vec3 acceleration, eu.fau.cs7.daceDS.datamodel.Vec3 position, eu.fau.cs7.daceDS.datamodel.Vec3 rotation, java.lang.Long road, java.lang.Integer lane, java.util.List<eu.fau.cs7.daceDS.datamodel.Waypoint> route, java.util.List<eu.fau.cs7.daceDS.datamodel.Sensor> sensor, java.lang.CharSequence type, eu.fau.cs7.daceDS.datamodel.Vec3 velocity, java.lang.Double speed, java.lang.Double throttle, java.lang.Double steer, java.lang.Double brake, java.lang.Double gear) {
    this.vehicleID = vehicleID;
    this.acceleration = acceleration;
    this.position = position;
    this.rotation = rotation;
    this.road = road;
    this.lane = lane;
    this.route = route;
    this.sensor = sensor;
    this.type = type;
    this.velocity = velocity;
    this.speed = speed;
    this.throttle = throttle;
    this.steer = steer;
    this.brake = brake;
    this.gear = gear;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return vehicleID;
    case 1: return acceleration;
    case 2: return position;
    case 3: return rotation;
    case 4: return road;
    case 5: return lane;
    case 6: return route;
    case 7: return sensor;
    case 8: return type;
    case 9: return velocity;
    case 10: return speed;
    case 11: return throttle;
    case 12: return steer;
    case 13: return brake;
    case 14: return gear;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: vehicleID = (java.lang.CharSequence)value$; break;
    case 1: acceleration = (eu.fau.cs7.daceDS.datamodel.Vec3)value$; break;
    case 2: position = (eu.fau.cs7.daceDS.datamodel.Vec3)value$; break;
    case 3: rotation = (eu.fau.cs7.daceDS.datamodel.Vec3)value$; break;
    case 4: road = (java.lang.Long)value$; break;
    case 5: lane = (java.lang.Integer)value$; break;
    case 6: route = (java.util.List<eu.fau.cs7.daceDS.datamodel.Waypoint>)value$; break;
    case 7: sensor = (java.util.List<eu.fau.cs7.daceDS.datamodel.Sensor>)value$; break;
    case 8: type = (java.lang.CharSequence)value$; break;
    case 9: velocity = (eu.fau.cs7.daceDS.datamodel.Vec3)value$; break;
    case 10: speed = (java.lang.Double)value$; break;
    case 11: throttle = (java.lang.Double)value$; break;
    case 12: steer = (java.lang.Double)value$; break;
    case 13: brake = (java.lang.Double)value$; break;
    case 14: gear = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'vehicleID' field.
   * @return The value of the 'vehicleID' field.
   */
  public java.lang.CharSequence getVehicleID() {
    return vehicleID;
  }


  /**
   * Sets the value of the 'vehicleID' field.
   * @param value the value to set.
   */
  public void setVehicleID(java.lang.CharSequence value) {
    this.vehicleID = value;
  }

  /**
   * Gets the value of the 'acceleration' field.
   * @return The value of the 'acceleration' field.
   */
  public eu.fau.cs7.daceDS.datamodel.Vec3 getAcceleration() {
    return acceleration;
  }


  /**
   * Sets the value of the 'acceleration' field.
   * @param value the value to set.
   */
  public void setAcceleration(eu.fau.cs7.daceDS.datamodel.Vec3 value) {
    this.acceleration = value;
  }

  /**
   * Gets the value of the 'position' field.
   * @return The value of the 'position' field.
   */
  public eu.fau.cs7.daceDS.datamodel.Vec3 getPosition() {
    return position;
  }


  /**
   * Sets the value of the 'position' field.
   * @param value the value to set.
   */
  public void setPosition(eu.fau.cs7.daceDS.datamodel.Vec3 value) {
    this.position = value;
  }

  /**
   * Gets the value of the 'rotation' field.
   * @return The value of the 'rotation' field.
   */
  public eu.fau.cs7.daceDS.datamodel.Vec3 getRotation() {
    return rotation;
  }


  /**
   * Sets the value of the 'rotation' field.
   * @param value the value to set.
   */
  public void setRotation(eu.fau.cs7.daceDS.datamodel.Vec3 value) {
    this.rotation = value;
  }

  /**
   * Gets the value of the 'road' field.
   * @return The value of the 'road' field.
   */
  public java.lang.Long getRoad() {
    return road;
  }


  /**
   * Sets the value of the 'road' field.
   * @param value the value to set.
   */
  public void setRoad(java.lang.Long value) {
    this.road = value;
  }

  /**
   * Gets the value of the 'lane' field.
   * @return The value of the 'lane' field.
   */
  public java.lang.Integer getLane() {
    return lane;
  }


  /**
   * Sets the value of the 'lane' field.
   * @param value the value to set.
   */
  public void setLane(java.lang.Integer value) {
    this.lane = value;
  }

  /**
   * Gets the value of the 'route' field.
   * @return The value of the 'route' field.
   */
  public java.util.List<eu.fau.cs7.daceDS.datamodel.Waypoint> getRoute() {
    return route;
  }


  /**
   * Sets the value of the 'route' field.
   * @param value the value to set.
   */
  public void setRoute(java.util.List<eu.fau.cs7.daceDS.datamodel.Waypoint> value) {
    this.route = value;
  }

  /**
   * Gets the value of the 'sensor' field.
   * @return The value of the 'sensor' field.
   */
  public java.util.List<eu.fau.cs7.daceDS.datamodel.Sensor> getSensor() {
    return sensor;
  }


  /**
   * Sets the value of the 'sensor' field.
   * @param value the value to set.
   */
  public void setSensor(java.util.List<eu.fau.cs7.daceDS.datamodel.Sensor> value) {
    this.sensor = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'velocity' field.
   * @return The value of the 'velocity' field.
   */
  public eu.fau.cs7.daceDS.datamodel.Vec3 getVelocity() {
    return velocity;
  }


  /**
   * Sets the value of the 'velocity' field.
   * @param value the value to set.
   */
  public void setVelocity(eu.fau.cs7.daceDS.datamodel.Vec3 value) {
    this.velocity = value;
  }

  /**
   * Gets the value of the 'speed' field.
   * @return The value of the 'speed' field.
   */
  public java.lang.Double getSpeed() {
    return speed;
  }


  /**
   * Sets the value of the 'speed' field.
   * @param value the value to set.
   */
  public void setSpeed(java.lang.Double value) {
    this.speed = value;
  }

  /**
   * Gets the value of the 'throttle' field.
   * @return The value of the 'throttle' field.
   */
  public java.lang.Double getThrottle() {
    return throttle;
  }


  /**
   * Sets the value of the 'throttle' field.
   * @param value the value to set.
   */
  public void setThrottle(java.lang.Double value) {
    this.throttle = value;
  }

  /**
   * Gets the value of the 'steer' field.
   * @return The value of the 'steer' field.
   */
  public java.lang.Double getSteer() {
    return steer;
  }


  /**
   * Sets the value of the 'steer' field.
   * @param value the value to set.
   */
  public void setSteer(java.lang.Double value) {
    this.steer = value;
  }

  /**
   * Gets the value of the 'brake' field.
   * @return The value of the 'brake' field.
   */
  public java.lang.Double getBrake() {
    return brake;
  }


  /**
   * Sets the value of the 'brake' field.
   * @param value the value to set.
   */
  public void setBrake(java.lang.Double value) {
    this.brake = value;
  }

  /**
   * Gets the value of the 'gear' field.
   * @return The value of the 'gear' field.
   */
  public java.lang.Double getGear() {
    return gear;
  }


  /**
   * Sets the value of the 'gear' field.
   * @param value the value to set.
   */
  public void setGear(java.lang.Double value) {
    this.gear = value;
  }

  /**
   * Creates a new SubMicro RecordBuilder.
   * @return A new SubMicro RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.SubMicro.Builder newBuilder() {
    return new eu.fau.cs7.daceDS.datamodel.SubMicro.Builder();
  }

  /**
   * Creates a new SubMicro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SubMicro RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.SubMicro.Builder newBuilder(eu.fau.cs7.daceDS.datamodel.SubMicro.Builder other) {
    if (other == null) {
      return new eu.fau.cs7.daceDS.datamodel.SubMicro.Builder();
    } else {
      return new eu.fau.cs7.daceDS.datamodel.SubMicro.Builder(other);
    }
  }

  /**
   * Creates a new SubMicro RecordBuilder by copying an existing SubMicro instance.
   * @param other The existing instance to copy.
   * @return A new SubMicro RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.SubMicro.Builder newBuilder(eu.fau.cs7.daceDS.datamodel.SubMicro other) {
    if (other == null) {
      return new eu.fau.cs7.daceDS.datamodel.SubMicro.Builder();
    } else {
      return new eu.fau.cs7.daceDS.datamodel.SubMicro.Builder(other);
    }
  }

  /**
   * RecordBuilder for SubMicro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SubMicro>
    implements org.apache.avro.data.RecordBuilder<SubMicro> {

    private java.lang.CharSequence vehicleID;
    private eu.fau.cs7.daceDS.datamodel.Vec3 acceleration;
    private eu.fau.cs7.daceDS.datamodel.Vec3.Builder accelerationBuilder;
    private eu.fau.cs7.daceDS.datamodel.Vec3 position;
    private eu.fau.cs7.daceDS.datamodel.Vec3.Builder positionBuilder;
    private eu.fau.cs7.daceDS.datamodel.Vec3 rotation;
    private eu.fau.cs7.daceDS.datamodel.Vec3.Builder rotationBuilder;
    private java.lang.Long road;
    private java.lang.Integer lane;
    private java.util.List<eu.fau.cs7.daceDS.datamodel.Waypoint> route;
    private java.util.List<eu.fau.cs7.daceDS.datamodel.Sensor> sensor;
    private java.lang.CharSequence type;
    private eu.fau.cs7.daceDS.datamodel.Vec3 velocity;
    private eu.fau.cs7.daceDS.datamodel.Vec3.Builder velocityBuilder;
    private java.lang.Double speed;
    private java.lang.Double throttle;
    private java.lang.Double steer;
    private java.lang.Double brake;
    private java.lang.Double gear;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.fau.cs7.daceDS.datamodel.SubMicro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.vehicleID)) {
        this.vehicleID = data().deepCopy(fields()[0].schema(), other.vehicleID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.acceleration)) {
        this.acceleration = data().deepCopy(fields()[1].schema(), other.acceleration);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasAccelerationBuilder()) {
        this.accelerationBuilder = eu.fau.cs7.daceDS.datamodel.Vec3.newBuilder(other.getAccelerationBuilder());
      }
      if (isValidValue(fields()[2], other.position)) {
        this.position = data().deepCopy(fields()[2].schema(), other.position);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasPositionBuilder()) {
        this.positionBuilder = eu.fau.cs7.daceDS.datamodel.Vec3.newBuilder(other.getPositionBuilder());
      }
      if (isValidValue(fields()[3], other.rotation)) {
        this.rotation = data().deepCopy(fields()[3].schema(), other.rotation);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasRotationBuilder()) {
        this.rotationBuilder = eu.fau.cs7.daceDS.datamodel.Vec3.newBuilder(other.getRotationBuilder());
      }
      if (isValidValue(fields()[4], other.road)) {
        this.road = data().deepCopy(fields()[4].schema(), other.road);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.lane)) {
        this.lane = data().deepCopy(fields()[5].schema(), other.lane);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.route)) {
        this.route = data().deepCopy(fields()[6].schema(), other.route);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.sensor)) {
        this.sensor = data().deepCopy(fields()[7].schema(), other.sensor);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.type)) {
        this.type = data().deepCopy(fields()[8].schema(), other.type);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.velocity)) {
        this.velocity = data().deepCopy(fields()[9].schema(), other.velocity);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (other.hasVelocityBuilder()) {
        this.velocityBuilder = eu.fau.cs7.daceDS.datamodel.Vec3.newBuilder(other.getVelocityBuilder());
      }
      if (isValidValue(fields()[10], other.speed)) {
        this.speed = data().deepCopy(fields()[10].schema(), other.speed);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.throttle)) {
        this.throttle = data().deepCopy(fields()[11].schema(), other.throttle);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.steer)) {
        this.steer = data().deepCopy(fields()[12].schema(), other.steer);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.brake)) {
        this.brake = data().deepCopy(fields()[13].schema(), other.brake);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.gear)) {
        this.gear = data().deepCopy(fields()[14].schema(), other.gear);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
    }

    /**
     * Creates a Builder by copying an existing SubMicro instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.fau.cs7.daceDS.datamodel.SubMicro other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.vehicleID)) {
        this.vehicleID = data().deepCopy(fields()[0].schema(), other.vehicleID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.acceleration)) {
        this.acceleration = data().deepCopy(fields()[1].schema(), other.acceleration);
        fieldSetFlags()[1] = true;
      }
      this.accelerationBuilder = null;
      if (isValidValue(fields()[2], other.position)) {
        this.position = data().deepCopy(fields()[2].schema(), other.position);
        fieldSetFlags()[2] = true;
      }
      this.positionBuilder = null;
      if (isValidValue(fields()[3], other.rotation)) {
        this.rotation = data().deepCopy(fields()[3].schema(), other.rotation);
        fieldSetFlags()[3] = true;
      }
      this.rotationBuilder = null;
      if (isValidValue(fields()[4], other.road)) {
        this.road = data().deepCopy(fields()[4].schema(), other.road);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.lane)) {
        this.lane = data().deepCopy(fields()[5].schema(), other.lane);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.route)) {
        this.route = data().deepCopy(fields()[6].schema(), other.route);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.sensor)) {
        this.sensor = data().deepCopy(fields()[7].schema(), other.sensor);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.type)) {
        this.type = data().deepCopy(fields()[8].schema(), other.type);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.velocity)) {
        this.velocity = data().deepCopy(fields()[9].schema(), other.velocity);
        fieldSetFlags()[9] = true;
      }
      this.velocityBuilder = null;
      if (isValidValue(fields()[10], other.speed)) {
        this.speed = data().deepCopy(fields()[10].schema(), other.speed);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.throttle)) {
        this.throttle = data().deepCopy(fields()[11].schema(), other.throttle);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.steer)) {
        this.steer = data().deepCopy(fields()[12].schema(), other.steer);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.brake)) {
        this.brake = data().deepCopy(fields()[13].schema(), other.brake);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.gear)) {
        this.gear = data().deepCopy(fields()[14].schema(), other.gear);
        fieldSetFlags()[14] = true;
      }
    }

    /**
      * Gets the value of the 'vehicleID' field.
      * @return The value.
      */
    public java.lang.CharSequence getVehicleID() {
      return vehicleID;
    }


    /**
      * Sets the value of the 'vehicleID' field.
      * @param value The value of 'vehicleID'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder setVehicleID(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.vehicleID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicleID' field has been set.
      * @return True if the 'vehicleID' field has been set, false otherwise.
      */
    public boolean hasVehicleID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'vehicleID' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder clearVehicleID() {
      vehicleID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'acceleration' field.
      * @return The value.
      */
    public eu.fau.cs7.daceDS.datamodel.Vec3 getAcceleration() {
      return acceleration;
    }


    /**
      * Sets the value of the 'acceleration' field.
      * @param value The value of 'acceleration'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder setAcceleration(eu.fau.cs7.daceDS.datamodel.Vec3 value) {
      validate(fields()[1], value);
      this.accelerationBuilder = null;
      this.acceleration = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'acceleration' field has been set.
      * @return True if the 'acceleration' field has been set, false otherwise.
      */
    public boolean hasAcceleration() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'acceleration' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public eu.fau.cs7.daceDS.datamodel.Vec3.Builder getAccelerationBuilder() {
      if (accelerationBuilder == null) {
        if (hasAcceleration()) {
          setAccelerationBuilder(eu.fau.cs7.daceDS.datamodel.Vec3.newBuilder(acceleration));
        } else {
          setAccelerationBuilder(eu.fau.cs7.daceDS.datamodel.Vec3.newBuilder());
        }
      }
      return accelerationBuilder;
    }

    /**
     * Sets the Builder instance for the 'acceleration' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder setAccelerationBuilder(eu.fau.cs7.daceDS.datamodel.Vec3.Builder value) {
      clearAcceleration();
      accelerationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'acceleration' field has an active Builder instance
     * @return True if the 'acceleration' field has an active Builder instance
     */
    public boolean hasAccelerationBuilder() {
      return accelerationBuilder != null;
    }

    /**
      * Clears the value of the 'acceleration' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder clearAcceleration() {
      acceleration = null;
      accelerationBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'position' field.
      * @return The value.
      */
    public eu.fau.cs7.daceDS.datamodel.Vec3 getPosition() {
      return position;
    }


    /**
      * Sets the value of the 'position' field.
      * @param value The value of 'position'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder setPosition(eu.fau.cs7.daceDS.datamodel.Vec3 value) {
      validate(fields()[2], value);
      this.positionBuilder = null;
      this.position = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'position' field has been set.
      * @return True if the 'position' field has been set, false otherwise.
      */
    public boolean hasPosition() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'position' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public eu.fau.cs7.daceDS.datamodel.Vec3.Builder getPositionBuilder() {
      if (positionBuilder == null) {
        if (hasPosition()) {
          setPositionBuilder(eu.fau.cs7.daceDS.datamodel.Vec3.newBuilder(position));
        } else {
          setPositionBuilder(eu.fau.cs7.daceDS.datamodel.Vec3.newBuilder());
        }
      }
      return positionBuilder;
    }

    /**
     * Sets the Builder instance for the 'position' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder setPositionBuilder(eu.fau.cs7.daceDS.datamodel.Vec3.Builder value) {
      clearPosition();
      positionBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'position' field has an active Builder instance
     * @return True if the 'position' field has an active Builder instance
     */
    public boolean hasPositionBuilder() {
      return positionBuilder != null;
    }

    /**
      * Clears the value of the 'position' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder clearPosition() {
      position = null;
      positionBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'rotation' field.
      * @return The value.
      */
    public eu.fau.cs7.daceDS.datamodel.Vec3 getRotation() {
      return rotation;
    }


    /**
      * Sets the value of the 'rotation' field.
      * @param value The value of 'rotation'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder setRotation(eu.fau.cs7.daceDS.datamodel.Vec3 value) {
      validate(fields()[3], value);
      this.rotationBuilder = null;
      this.rotation = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'rotation' field has been set.
      * @return True if the 'rotation' field has been set, false otherwise.
      */
    public boolean hasRotation() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'rotation' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public eu.fau.cs7.daceDS.datamodel.Vec3.Builder getRotationBuilder() {
      if (rotationBuilder == null) {
        if (hasRotation()) {
          setRotationBuilder(eu.fau.cs7.daceDS.datamodel.Vec3.newBuilder(rotation));
        } else {
          setRotationBuilder(eu.fau.cs7.daceDS.datamodel.Vec3.newBuilder());
        }
      }
      return rotationBuilder;
    }

    /**
     * Sets the Builder instance for the 'rotation' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder setRotationBuilder(eu.fau.cs7.daceDS.datamodel.Vec3.Builder value) {
      clearRotation();
      rotationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'rotation' field has an active Builder instance
     * @return True if the 'rotation' field has an active Builder instance
     */
    public boolean hasRotationBuilder() {
      return rotationBuilder != null;
    }

    /**
      * Clears the value of the 'rotation' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder clearRotation() {
      rotation = null;
      rotationBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'road' field.
      * @return The value.
      */
    public java.lang.Long getRoad() {
      return road;
    }


    /**
      * Sets the value of the 'road' field.
      * @param value The value of 'road'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder setRoad(java.lang.Long value) {
      validate(fields()[4], value);
      this.road = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'road' field has been set.
      * @return True if the 'road' field has been set, false otherwise.
      */
    public boolean hasRoad() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'road' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder clearRoad() {
      road = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'lane' field.
      * @return The value.
      */
    public java.lang.Integer getLane() {
      return lane;
    }


    /**
      * Sets the value of the 'lane' field.
      * @param value The value of 'lane'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder setLane(java.lang.Integer value) {
      validate(fields()[5], value);
      this.lane = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'lane' field has been set.
      * @return True if the 'lane' field has been set, false otherwise.
      */
    public boolean hasLane() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'lane' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder clearLane() {
      lane = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'route' field.
      * @return The value.
      */
    public java.util.List<eu.fau.cs7.daceDS.datamodel.Waypoint> getRoute() {
      return route;
    }


    /**
      * Sets the value of the 'route' field.
      * @param value The value of 'route'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder setRoute(java.util.List<eu.fau.cs7.daceDS.datamodel.Waypoint> value) {
      validate(fields()[6], value);
      this.route = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'route' field has been set.
      * @return True if the 'route' field has been set, false otherwise.
      */
    public boolean hasRoute() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'route' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder clearRoute() {
      route = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'sensor' field.
      * @return The value.
      */
    public java.util.List<eu.fau.cs7.daceDS.datamodel.Sensor> getSensor() {
      return sensor;
    }


    /**
      * Sets the value of the 'sensor' field.
      * @param value The value of 'sensor'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder setSensor(java.util.List<eu.fau.cs7.daceDS.datamodel.Sensor> value) {
      validate(fields()[7], value);
      this.sensor = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'sensor' field has been set.
      * @return True if the 'sensor' field has been set, false otherwise.
      */
    public boolean hasSensor() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'sensor' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder clearSensor() {
      sensor = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder setType(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.type = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder clearType() {
      type = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'velocity' field.
      * @return The value.
      */
    public eu.fau.cs7.daceDS.datamodel.Vec3 getVelocity() {
      return velocity;
    }


    /**
      * Sets the value of the 'velocity' field.
      * @param value The value of 'velocity'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder setVelocity(eu.fau.cs7.daceDS.datamodel.Vec3 value) {
      validate(fields()[9], value);
      this.velocityBuilder = null;
      this.velocity = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'velocity' field has been set.
      * @return True if the 'velocity' field has been set, false otherwise.
      */
    public boolean hasVelocity() {
      return fieldSetFlags()[9];
    }

    /**
     * Gets the Builder instance for the 'velocity' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public eu.fau.cs7.daceDS.datamodel.Vec3.Builder getVelocityBuilder() {
      if (velocityBuilder == null) {
        if (hasVelocity()) {
          setVelocityBuilder(eu.fau.cs7.daceDS.datamodel.Vec3.newBuilder(velocity));
        } else {
          setVelocityBuilder(eu.fau.cs7.daceDS.datamodel.Vec3.newBuilder());
        }
      }
      return velocityBuilder;
    }

    /**
     * Sets the Builder instance for the 'velocity' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder setVelocityBuilder(eu.fau.cs7.daceDS.datamodel.Vec3.Builder value) {
      clearVelocity();
      velocityBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'velocity' field has an active Builder instance
     * @return True if the 'velocity' field has an active Builder instance
     */
    public boolean hasVelocityBuilder() {
      return velocityBuilder != null;
    }

    /**
      * Clears the value of the 'velocity' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder clearVelocity() {
      velocity = null;
      velocityBuilder = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'speed' field.
      * @return The value.
      */
    public java.lang.Double getSpeed() {
      return speed;
    }


    /**
      * Sets the value of the 'speed' field.
      * @param value The value of 'speed'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder setSpeed(java.lang.Double value) {
      validate(fields()[10], value);
      this.speed = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'speed' field has been set.
      * @return True if the 'speed' field has been set, false otherwise.
      */
    public boolean hasSpeed() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'speed' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder clearSpeed() {
      speed = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'throttle' field.
      * @return The value.
      */
    public java.lang.Double getThrottle() {
      return throttle;
    }


    /**
      * Sets the value of the 'throttle' field.
      * @param value The value of 'throttle'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder setThrottle(java.lang.Double value) {
      validate(fields()[11], value);
      this.throttle = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'throttle' field has been set.
      * @return True if the 'throttle' field has been set, false otherwise.
      */
    public boolean hasThrottle() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'throttle' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder clearThrottle() {
      throttle = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'steer' field.
      * @return The value.
      */
    public java.lang.Double getSteer() {
      return steer;
    }


    /**
      * Sets the value of the 'steer' field.
      * @param value The value of 'steer'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder setSteer(java.lang.Double value) {
      validate(fields()[12], value);
      this.steer = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'steer' field has been set.
      * @return True if the 'steer' field has been set, false otherwise.
      */
    public boolean hasSteer() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'steer' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder clearSteer() {
      steer = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'brake' field.
      * @return The value.
      */
    public java.lang.Double getBrake() {
      return brake;
    }


    /**
      * Sets the value of the 'brake' field.
      * @param value The value of 'brake'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder setBrake(java.lang.Double value) {
      validate(fields()[13], value);
      this.brake = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'brake' field has been set.
      * @return True if the 'brake' field has been set, false otherwise.
      */
    public boolean hasBrake() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'brake' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder clearBrake() {
      brake = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'gear' field.
      * @return The value.
      */
    public java.lang.Double getGear() {
      return gear;
    }


    /**
      * Sets the value of the 'gear' field.
      * @param value The value of 'gear'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder setGear(java.lang.Double value) {
      validate(fields()[14], value);
      this.gear = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'gear' field has been set.
      * @return True if the 'gear' field has been set, false otherwise.
      */
    public boolean hasGear() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'gear' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.SubMicro.Builder clearGear() {
      gear = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SubMicro build() {
      try {
        SubMicro record = new SubMicro();
        record.vehicleID = fieldSetFlags()[0] ? this.vehicleID : (java.lang.CharSequence) defaultValue(fields()[0]);
        if (accelerationBuilder != null) {
          try {
            record.acceleration = this.accelerationBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("acceleration"));
            throw e;
          }
        } else {
          record.acceleration = fieldSetFlags()[1] ? this.acceleration : (eu.fau.cs7.daceDS.datamodel.Vec3) defaultValue(fields()[1]);
        }
        if (positionBuilder != null) {
          try {
            record.position = this.positionBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("position"));
            throw e;
          }
        } else {
          record.position = fieldSetFlags()[2] ? this.position : (eu.fau.cs7.daceDS.datamodel.Vec3) defaultValue(fields()[2]);
        }
        if (rotationBuilder != null) {
          try {
            record.rotation = this.rotationBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("rotation"));
            throw e;
          }
        } else {
          record.rotation = fieldSetFlags()[3] ? this.rotation : (eu.fau.cs7.daceDS.datamodel.Vec3) defaultValue(fields()[3]);
        }
        record.road = fieldSetFlags()[4] ? this.road : (java.lang.Long) defaultValue(fields()[4]);
        record.lane = fieldSetFlags()[5] ? this.lane : (java.lang.Integer) defaultValue(fields()[5]);
        record.route = fieldSetFlags()[6] ? this.route : (java.util.List<eu.fau.cs7.daceDS.datamodel.Waypoint>) defaultValue(fields()[6]);
        record.sensor = fieldSetFlags()[7] ? this.sensor : (java.util.List<eu.fau.cs7.daceDS.datamodel.Sensor>) defaultValue(fields()[7]);
        record.type = fieldSetFlags()[8] ? this.type : (java.lang.CharSequence) defaultValue(fields()[8]);
        if (velocityBuilder != null) {
          try {
            record.velocity = this.velocityBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("velocity"));
            throw e;
          }
        } else {
          record.velocity = fieldSetFlags()[9] ? this.velocity : (eu.fau.cs7.daceDS.datamodel.Vec3) defaultValue(fields()[9]);
        }
        record.speed = fieldSetFlags()[10] ? this.speed : (java.lang.Double) defaultValue(fields()[10]);
        record.throttle = fieldSetFlags()[11] ? this.throttle : (java.lang.Double) defaultValue(fields()[11]);
        record.steer = fieldSetFlags()[12] ? this.steer : (java.lang.Double) defaultValue(fields()[12]);
        record.brake = fieldSetFlags()[13] ? this.brake : (java.lang.Double) defaultValue(fields()[13]);
        record.gear = fieldSetFlags()[14] ? this.gear : (java.lang.Double) defaultValue(fields()[14]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SubMicro>
    WRITER$ = (org.apache.avro.io.DatumWriter<SubMicro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SubMicro>
    READER$ = (org.apache.avro.io.DatumReader<SubMicro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










