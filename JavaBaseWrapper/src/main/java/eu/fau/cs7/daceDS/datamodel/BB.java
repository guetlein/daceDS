/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.fau.cs7.daceDS.datamodel;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class BB extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8156069828416332014L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BB\",\"namespace\":\"eu.fau.cs7.daceDS.datamodel\",\"fields\":[{\"name\":\"instanceID\",\"type\":\"string\"},{\"name\":\"domain\",\"type\":\"string\"},{\"name\":\"layer\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"stepLength\",\"type\":\"int\"},{\"name\":\"isExternal\",\"type\":\"boolean\"},{\"name\":\"parameters\",\"type\":{\"type\":\"map\",\"values\":\"string\",\"default\":{}}},{\"name\":\"resources\",\"type\":{\"type\":\"map\",\"values\":\"string\",\"default\":{}}},{\"name\":\"results\",\"type\":{\"type\":\"map\",\"values\":\"string\",\"default\":{}}},{\"name\":\"responsibilities\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"synchronized\",\"type\":\"boolean\"},{\"name\":\"observers\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Observer\",\"fields\":[{\"name\":\"task\",\"type\":\"string\"},{\"name\":\"element\",\"type\":\"string\"},{\"name\":\"filter\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"int\"},{\"name\":\"trigger\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BB> ENCODER =
      new BinaryMessageEncoder<BB>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BB> DECODER =
      new BinaryMessageDecoder<BB>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<BB> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<BB> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<BB> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<BB>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this BB to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a BB from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a BB instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static BB fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence instanceID;
   private java.lang.CharSequence domain;
   private java.lang.CharSequence layer;
   private java.lang.CharSequence type;
   private int stepLength;
   private boolean isExternal;
   private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> parameters;
   private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> resources;
   private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> results;
   private java.util.List<java.lang.CharSequence> responsibilities;
   private boolean synchronized$;
   private java.util.List<eu.fau.cs7.daceDS.datamodel.Observer> observers;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BB() {}

  /**
   * All-args constructor.
   * @param instanceID The new value for instanceID
   * @param domain The new value for domain
   * @param layer The new value for layer
   * @param type The new value for type
   * @param stepLength The new value for stepLength
   * @param isExternal The new value for isExternal
   * @param parameters The new value for parameters
   * @param resources The new value for resources
   * @param results The new value for results
   * @param responsibilities The new value for responsibilities
   * @param synchronized$ The new value for synchronized
   * @param observers The new value for observers
   */
  public BB(java.lang.CharSequence instanceID, java.lang.CharSequence domain, java.lang.CharSequence layer, java.lang.CharSequence type, java.lang.Integer stepLength, java.lang.Boolean isExternal, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> parameters, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> resources, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> results, java.util.List<java.lang.CharSequence> responsibilities, java.lang.Boolean synchronized$, java.util.List<eu.fau.cs7.daceDS.datamodel.Observer> observers) {
    this.instanceID = instanceID;
    this.domain = domain;
    this.layer = layer;
    this.type = type;
    this.stepLength = stepLength;
    this.isExternal = isExternal;
    this.parameters = parameters;
    this.resources = resources;
    this.results = results;
    this.responsibilities = responsibilities;
    this.synchronized$ = synchronized$;
    this.observers = observers;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return instanceID;
    case 1: return domain;
    case 2: return layer;
    case 3: return type;
    case 4: return stepLength;
    case 5: return isExternal;
    case 6: return parameters;
    case 7: return resources;
    case 8: return results;
    case 9: return responsibilities;
    case 10: return synchronized$;
    case 11: return observers;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: instanceID = (java.lang.CharSequence)value$; break;
    case 1: domain = (java.lang.CharSequence)value$; break;
    case 2: layer = (java.lang.CharSequence)value$; break;
    case 3: type = (java.lang.CharSequence)value$; break;
    case 4: stepLength = (java.lang.Integer)value$; break;
    case 5: isExternal = (java.lang.Boolean)value$; break;
    case 6: parameters = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 7: resources = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 8: results = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 9: responsibilities = (java.util.List<java.lang.CharSequence>)value$; break;
    case 10: synchronized$ = (java.lang.Boolean)value$; break;
    case 11: observers = (java.util.List<eu.fau.cs7.daceDS.datamodel.Observer>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'instanceID' field.
   * @return The value of the 'instanceID' field.
   */
  public java.lang.CharSequence getInstanceID() {
    return instanceID;
  }


  /**
   * Sets the value of the 'instanceID' field.
   * @param value the value to set.
   */
  public void setInstanceID(java.lang.CharSequence value) {
    this.instanceID = value;
  }

  /**
   * Gets the value of the 'domain' field.
   * @return The value of the 'domain' field.
   */
  public java.lang.CharSequence getDomain() {
    return domain;
  }


  /**
   * Sets the value of the 'domain' field.
   * @param value the value to set.
   */
  public void setDomain(java.lang.CharSequence value) {
    this.domain = value;
  }

  /**
   * Gets the value of the 'layer' field.
   * @return The value of the 'layer' field.
   */
  public java.lang.CharSequence getLayer() {
    return layer;
  }


  /**
   * Sets the value of the 'layer' field.
   * @param value the value to set.
   */
  public void setLayer(java.lang.CharSequence value) {
    this.layer = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'stepLength' field.
   * @return The value of the 'stepLength' field.
   */
  public int getStepLength() {
    return stepLength;
  }


  /**
   * Sets the value of the 'stepLength' field.
   * @param value the value to set.
   */
  public void setStepLength(int value) {
    this.stepLength = value;
  }

  /**
   * Gets the value of the 'isExternal' field.
   * @return The value of the 'isExternal' field.
   */
  public boolean getIsExternal() {
    return isExternal;
  }


  /**
   * Sets the value of the 'isExternal' field.
   * @param value the value to set.
   */
  public void setIsExternal(boolean value) {
    this.isExternal = value;
  }

  /**
   * Gets the value of the 'parameters' field.
   * @return The value of the 'parameters' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getParameters() {
    return parameters;
  }


  /**
   * Sets the value of the 'parameters' field.
   * @param value the value to set.
   */
  public void setParameters(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.parameters = value;
  }

  /**
   * Gets the value of the 'resources' field.
   * @return The value of the 'resources' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getResources() {
    return resources;
  }


  /**
   * Sets the value of the 'resources' field.
   * @param value the value to set.
   */
  public void setResources(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.resources = value;
  }

  /**
   * Gets the value of the 'results' field.
   * @return The value of the 'results' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getResults() {
    return results;
  }


  /**
   * Sets the value of the 'results' field.
   * @param value the value to set.
   */
  public void setResults(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.results = value;
  }

  /**
   * Gets the value of the 'responsibilities' field.
   * @return The value of the 'responsibilities' field.
   */
  public java.util.List<java.lang.CharSequence> getResponsibilities() {
    return responsibilities;
  }


  /**
   * Sets the value of the 'responsibilities' field.
   * @param value the value to set.
   */
  public void setResponsibilities(java.util.List<java.lang.CharSequence> value) {
    this.responsibilities = value;
  }

  /**
   * Gets the value of the 'synchronized$' field.
   * @return The value of the 'synchronized$' field.
   */
  public boolean getSynchronized$() {
    return synchronized$;
  }


  /**
   * Sets the value of the 'synchronized$' field.
   * @param value the value to set.
   */
  public void setSynchronized$(boolean value) {
    this.synchronized$ = value;
  }

  /**
   * Gets the value of the 'observers' field.
   * @return The value of the 'observers' field.
   */
  public java.util.List<eu.fau.cs7.daceDS.datamodel.Observer> getObservers() {
    return observers;
  }


  /**
   * Sets the value of the 'observers' field.
   * @param value the value to set.
   */
  public void setObservers(java.util.List<eu.fau.cs7.daceDS.datamodel.Observer> value) {
    this.observers = value;
  }

  /**
   * Creates a new BB RecordBuilder.
   * @return A new BB RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.BB.Builder newBuilder() {
    return new eu.fau.cs7.daceDS.datamodel.BB.Builder();
  }

  /**
   * Creates a new BB RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BB RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.BB.Builder newBuilder(eu.fau.cs7.daceDS.datamodel.BB.Builder other) {
    if (other == null) {
      return new eu.fau.cs7.daceDS.datamodel.BB.Builder();
    } else {
      return new eu.fau.cs7.daceDS.datamodel.BB.Builder(other);
    }
  }

  /**
   * Creates a new BB RecordBuilder by copying an existing BB instance.
   * @param other The existing instance to copy.
   * @return A new BB RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.BB.Builder newBuilder(eu.fau.cs7.daceDS.datamodel.BB other) {
    if (other == null) {
      return new eu.fau.cs7.daceDS.datamodel.BB.Builder();
    } else {
      return new eu.fau.cs7.daceDS.datamodel.BB.Builder(other);
    }
  }

  /**
   * RecordBuilder for BB instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BB>
    implements org.apache.avro.data.RecordBuilder<BB> {

    private java.lang.CharSequence instanceID;
    private java.lang.CharSequence domain;
    private java.lang.CharSequence layer;
    private java.lang.CharSequence type;
    private int stepLength;
    private boolean isExternal;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> parameters;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> resources;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> results;
    private java.util.List<java.lang.CharSequence> responsibilities;
    private boolean synchronized$;
    private java.util.List<eu.fau.cs7.daceDS.datamodel.Observer> observers;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.fau.cs7.daceDS.datamodel.BB.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.instanceID)) {
        this.instanceID = data().deepCopy(fields()[0].schema(), other.instanceID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.domain)) {
        this.domain = data().deepCopy(fields()[1].schema(), other.domain);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.layer)) {
        this.layer = data().deepCopy(fields()[2].schema(), other.layer);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.stepLength)) {
        this.stepLength = data().deepCopy(fields()[4].schema(), other.stepLength);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.isExternal)) {
        this.isExternal = data().deepCopy(fields()[5].schema(), other.isExternal);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.parameters)) {
        this.parameters = data().deepCopy(fields()[6].schema(), other.parameters);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.resources)) {
        this.resources = data().deepCopy(fields()[7].schema(), other.resources);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.results)) {
        this.results = data().deepCopy(fields()[8].schema(), other.results);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.responsibilities)) {
        this.responsibilities = data().deepCopy(fields()[9].schema(), other.responsibilities);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.synchronized$)) {
        this.synchronized$ = data().deepCopy(fields()[10].schema(), other.synchronized$);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.observers)) {
        this.observers = data().deepCopy(fields()[11].schema(), other.observers);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
    }

    /**
     * Creates a Builder by copying an existing BB instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.fau.cs7.daceDS.datamodel.BB other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.instanceID)) {
        this.instanceID = data().deepCopy(fields()[0].schema(), other.instanceID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.domain)) {
        this.domain = data().deepCopy(fields()[1].schema(), other.domain);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.layer)) {
        this.layer = data().deepCopy(fields()[2].schema(), other.layer);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.stepLength)) {
        this.stepLength = data().deepCopy(fields()[4].schema(), other.stepLength);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.isExternal)) {
        this.isExternal = data().deepCopy(fields()[5].schema(), other.isExternal);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.parameters)) {
        this.parameters = data().deepCopy(fields()[6].schema(), other.parameters);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.resources)) {
        this.resources = data().deepCopy(fields()[7].schema(), other.resources);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.results)) {
        this.results = data().deepCopy(fields()[8].schema(), other.results);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.responsibilities)) {
        this.responsibilities = data().deepCopy(fields()[9].schema(), other.responsibilities);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.synchronized$)) {
        this.synchronized$ = data().deepCopy(fields()[10].schema(), other.synchronized$);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.observers)) {
        this.observers = data().deepCopy(fields()[11].schema(), other.observers);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'instanceID' field.
      * @return The value.
      */
    public java.lang.CharSequence getInstanceID() {
      return instanceID;
    }


    /**
      * Sets the value of the 'instanceID' field.
      * @param value The value of 'instanceID'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.BB.Builder setInstanceID(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.instanceID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'instanceID' field has been set.
      * @return True if the 'instanceID' field has been set, false otherwise.
      */
    public boolean hasInstanceID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'instanceID' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.BB.Builder clearInstanceID() {
      instanceID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'domain' field.
      * @return The value.
      */
    public java.lang.CharSequence getDomain() {
      return domain;
    }


    /**
      * Sets the value of the 'domain' field.
      * @param value The value of 'domain'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.BB.Builder setDomain(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.domain = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'domain' field has been set.
      * @return True if the 'domain' field has been set, false otherwise.
      */
    public boolean hasDomain() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'domain' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.BB.Builder clearDomain() {
      domain = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'layer' field.
      * @return The value.
      */
    public java.lang.CharSequence getLayer() {
      return layer;
    }


    /**
      * Sets the value of the 'layer' field.
      * @param value The value of 'layer'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.BB.Builder setLayer(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.layer = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'layer' field has been set.
      * @return True if the 'layer' field has been set, false otherwise.
      */
    public boolean hasLayer() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'layer' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.BB.Builder clearLayer() {
      layer = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.BB.Builder setType(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.type = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.BB.Builder clearType() {
      type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'stepLength' field.
      * @return The value.
      */
    public int getStepLength() {
      return stepLength;
    }


    /**
      * Sets the value of the 'stepLength' field.
      * @param value The value of 'stepLength'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.BB.Builder setStepLength(int value) {
      validate(fields()[4], value);
      this.stepLength = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'stepLength' field has been set.
      * @return True if the 'stepLength' field has been set, false otherwise.
      */
    public boolean hasStepLength() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'stepLength' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.BB.Builder clearStepLength() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'isExternal' field.
      * @return The value.
      */
    public boolean getIsExternal() {
      return isExternal;
    }


    /**
      * Sets the value of the 'isExternal' field.
      * @param value The value of 'isExternal'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.BB.Builder setIsExternal(boolean value) {
      validate(fields()[5], value);
      this.isExternal = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'isExternal' field has been set.
      * @return True if the 'isExternal' field has been set, false otherwise.
      */
    public boolean hasIsExternal() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'isExternal' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.BB.Builder clearIsExternal() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'parameters' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getParameters() {
      return parameters;
    }


    /**
      * Sets the value of the 'parameters' field.
      * @param value The value of 'parameters'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.BB.Builder setParameters(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[6], value);
      this.parameters = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'parameters' field has been set.
      * @return True if the 'parameters' field has been set, false otherwise.
      */
    public boolean hasParameters() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'parameters' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.BB.Builder clearParameters() {
      parameters = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'resources' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getResources() {
      return resources;
    }


    /**
      * Sets the value of the 'resources' field.
      * @param value The value of 'resources'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.BB.Builder setResources(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[7], value);
      this.resources = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'resources' field has been set.
      * @return True if the 'resources' field has been set, false otherwise.
      */
    public boolean hasResources() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'resources' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.BB.Builder clearResources() {
      resources = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'results' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getResults() {
      return results;
    }


    /**
      * Sets the value of the 'results' field.
      * @param value The value of 'results'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.BB.Builder setResults(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[8], value);
      this.results = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'results' field has been set.
      * @return True if the 'results' field has been set, false otherwise.
      */
    public boolean hasResults() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'results' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.BB.Builder clearResults() {
      results = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'responsibilities' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getResponsibilities() {
      return responsibilities;
    }


    /**
      * Sets the value of the 'responsibilities' field.
      * @param value The value of 'responsibilities'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.BB.Builder setResponsibilities(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[9], value);
      this.responsibilities = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'responsibilities' field has been set.
      * @return True if the 'responsibilities' field has been set, false otherwise.
      */
    public boolean hasResponsibilities() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'responsibilities' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.BB.Builder clearResponsibilities() {
      responsibilities = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'synchronized$' field.
      * @return The value.
      */
    public boolean getSynchronized$() {
      return synchronized$;
    }


    /**
      * Sets the value of the 'synchronized$' field.
      * @param value The value of 'synchronized$'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.BB.Builder setSynchronized$(boolean value) {
      validate(fields()[10], value);
      this.synchronized$ = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'synchronized$' field has been set.
      * @return True if the 'synchronized$' field has been set, false otherwise.
      */
    public boolean hasSynchronized$() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'synchronized$' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.BB.Builder clearSynchronized$() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'observers' field.
      * @return The value.
      */
    public java.util.List<eu.fau.cs7.daceDS.datamodel.Observer> getObservers() {
      return observers;
    }


    /**
      * Sets the value of the 'observers' field.
      * @param value The value of 'observers'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.BB.Builder setObservers(java.util.List<eu.fau.cs7.daceDS.datamodel.Observer> value) {
      validate(fields()[11], value);
      this.observers = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'observers' field has been set.
      * @return True if the 'observers' field has been set, false otherwise.
      */
    public boolean hasObservers() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'observers' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.BB.Builder clearObservers() {
      observers = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BB build() {
      try {
        BB record = new BB();
        record.instanceID = fieldSetFlags()[0] ? this.instanceID : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.domain = fieldSetFlags()[1] ? this.domain : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.layer = fieldSetFlags()[2] ? this.layer : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.type = fieldSetFlags()[3] ? this.type : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.stepLength = fieldSetFlags()[4] ? this.stepLength : (java.lang.Integer) defaultValue(fields()[4]);
        record.isExternal = fieldSetFlags()[5] ? this.isExternal : (java.lang.Boolean) defaultValue(fields()[5]);
        record.parameters = fieldSetFlags()[6] ? this.parameters : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[6]);
        record.resources = fieldSetFlags()[7] ? this.resources : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[7]);
        record.results = fieldSetFlags()[8] ? this.results : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[8]);
        record.responsibilities = fieldSetFlags()[9] ? this.responsibilities : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[9]);
        record.synchronized$ = fieldSetFlags()[10] ? this.synchronized$ : (java.lang.Boolean) defaultValue(fields()[10]);
        record.observers = fieldSetFlags()[11] ? this.observers : (java.util.List<eu.fau.cs7.daceDS.datamodel.Observer>) defaultValue(fields()[11]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BB>
    WRITER$ = (org.apache.avro.io.DatumWriter<BB>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BB>
    READER$ = (org.apache.avro.io.DatumReader<BB>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.instanceID);

    out.writeString(this.domain);

    out.writeString(this.layer);

    out.writeString(this.type);

    out.writeInt(this.stepLength);

    out.writeBoolean(this.isExternal);

    long size0 = this.parameters.size();
    out.writeMapStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, java.lang.CharSequence> e0: this.parameters.entrySet()) {
      actualSize0++;
      out.startItem();
      out.writeString(e0.getKey());
      java.lang.CharSequence v0 = e0.getValue();
      out.writeString(v0);
    }
    out.writeMapEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.resources.size();
    out.writeMapStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, java.lang.CharSequence> e1: this.resources.entrySet()) {
      actualSize1++;
      out.startItem();
      out.writeString(e1.getKey());
      java.lang.CharSequence v1 = e1.getValue();
      out.writeString(v1);
    }
    out.writeMapEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    long size2 = this.results.size();
    out.writeMapStart();
    out.setItemCount(size2);
    long actualSize2 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, java.lang.CharSequence> e2: this.results.entrySet()) {
      actualSize2++;
      out.startItem();
      out.writeString(e2.getKey());
      java.lang.CharSequence v2 = e2.getValue();
      out.writeString(v2);
    }
    out.writeMapEnd();
    if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size2 + ", but element count was " + actualSize2 + ".");

    long size3 = this.responsibilities.size();
    out.writeArrayStart();
    out.setItemCount(size3);
    long actualSize3 = 0;
    for (java.lang.CharSequence e3: this.responsibilities) {
      actualSize3++;
      out.startItem();
      out.writeString(e3);
    }
    out.writeArrayEnd();
    if (actualSize3 != size3)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");

    out.writeBoolean(this.synchronized$);

    long size4 = this.observers.size();
    out.writeArrayStart();
    out.setItemCount(size4);
    long actualSize4 = 0;
    for (eu.fau.cs7.daceDS.datamodel.Observer e4: this.observers) {
      actualSize4++;
      out.startItem();
      e4.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize4 != size4)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size4 + ", but element count was " + actualSize4 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.instanceID = in.readString(this.instanceID instanceof Utf8 ? (Utf8)this.instanceID : null);

      this.domain = in.readString(this.domain instanceof Utf8 ? (Utf8)this.domain : null);

      this.layer = in.readString(this.layer instanceof Utf8 ? (Utf8)this.layer : null);

      this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);

      this.stepLength = in.readInt();

      this.isExternal = in.readBoolean();

      long size0 = in.readMapStart();
      java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m0 = this.parameters; // Need fresh name due to limitation of macro system
      if (m0 == null) {
        m0 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size0);
        this.parameters = m0;
      } else m0.clear();
      for ( ; 0 < size0; size0 = in.mapNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence k0 = null;
          k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
          java.lang.CharSequence v0 = null;
          v0 = in.readString(v0 instanceof Utf8 ? (Utf8)v0 : null);
          m0.put(k0, v0);
        }
      }

      long size1 = in.readMapStart();
      java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m1 = this.resources; // Need fresh name due to limitation of macro system
      if (m1 == null) {
        m1 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size1);
        this.resources = m1;
      } else m1.clear();
      for ( ; 0 < size1; size1 = in.mapNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.CharSequence k1 = null;
          k1 = in.readString(k1 instanceof Utf8 ? (Utf8)k1 : null);
          java.lang.CharSequence v1 = null;
          v1 = in.readString(v1 instanceof Utf8 ? (Utf8)v1 : null);
          m1.put(k1, v1);
        }
      }

      long size2 = in.readMapStart();
      java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m2 = this.results; // Need fresh name due to limitation of macro system
      if (m2 == null) {
        m2 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size2);
        this.results = m2;
      } else m2.clear();
      for ( ; 0 < size2; size2 = in.mapNext()) {
        for ( ; size2 != 0; size2--) {
          java.lang.CharSequence k2 = null;
          k2 = in.readString(k2 instanceof Utf8 ? (Utf8)k2 : null);
          java.lang.CharSequence v2 = null;
          v2 = in.readString(v2 instanceof Utf8 ? (Utf8)v2 : null);
          m2.put(k2, v2);
        }
      }

      long size3 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a3 = this.responsibilities;
      if (a3 == null) {
        a3 = new SpecificData.Array<java.lang.CharSequence>((int)size3, SCHEMA$.getField("responsibilities").schema());
        this.responsibilities = a3;
      } else a3.clear();
      SpecificData.Array<java.lang.CharSequence> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a3 : null);
      for ( ; 0 < size3; size3 = in.arrayNext()) {
        for ( ; size3 != 0; size3--) {
          java.lang.CharSequence e3 = (ga3 != null ? ga3.peek() : null);
          e3 = in.readString(e3 instanceof Utf8 ? (Utf8)e3 : null);
          a3.add(e3);
        }
      }

      this.synchronized$ = in.readBoolean();

      long size4 = in.readArrayStart();
      java.util.List<eu.fau.cs7.daceDS.datamodel.Observer> a4 = this.observers;
      if (a4 == null) {
        a4 = new SpecificData.Array<eu.fau.cs7.daceDS.datamodel.Observer>((int)size4, SCHEMA$.getField("observers").schema());
        this.observers = a4;
      } else a4.clear();
      SpecificData.Array<eu.fau.cs7.daceDS.datamodel.Observer> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<eu.fau.cs7.daceDS.datamodel.Observer>)a4 : null);
      for ( ; 0 < size4; size4 = in.arrayNext()) {
        for ( ; size4 != 0; size4--) {
          eu.fau.cs7.daceDS.datamodel.Observer e4 = (ga4 != null ? ga4.peek() : null);
          if (e4 == null) {
            e4 = new eu.fau.cs7.daceDS.datamodel.Observer();
          }
          e4.customDecode(in);
          a4.add(e4);
        }
      }

    } else {
      for (int i = 0; i < 12; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.instanceID = in.readString(this.instanceID instanceof Utf8 ? (Utf8)this.instanceID : null);
          break;

        case 1:
          this.domain = in.readString(this.domain instanceof Utf8 ? (Utf8)this.domain : null);
          break;

        case 2:
          this.layer = in.readString(this.layer instanceof Utf8 ? (Utf8)this.layer : null);
          break;

        case 3:
          this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
          break;

        case 4:
          this.stepLength = in.readInt();
          break;

        case 5:
          this.isExternal = in.readBoolean();
          break;

        case 6:
          long size0 = in.readMapStart();
          java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m0 = this.parameters; // Need fresh name due to limitation of macro system
          if (m0 == null) {
            m0 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size0);
            this.parameters = m0;
          } else m0.clear();
          for ( ; 0 < size0; size0 = in.mapNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence k0 = null;
              k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
              java.lang.CharSequence v0 = null;
              v0 = in.readString(v0 instanceof Utf8 ? (Utf8)v0 : null);
              m0.put(k0, v0);
            }
          }
          break;

        case 7:
          long size1 = in.readMapStart();
          java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m1 = this.resources; // Need fresh name due to limitation of macro system
          if (m1 == null) {
            m1 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size1);
            this.resources = m1;
          } else m1.clear();
          for ( ; 0 < size1; size1 = in.mapNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.CharSequence k1 = null;
              k1 = in.readString(k1 instanceof Utf8 ? (Utf8)k1 : null);
              java.lang.CharSequence v1 = null;
              v1 = in.readString(v1 instanceof Utf8 ? (Utf8)v1 : null);
              m1.put(k1, v1);
            }
          }
          break;

        case 8:
          long size2 = in.readMapStart();
          java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m2 = this.results; // Need fresh name due to limitation of macro system
          if (m2 == null) {
            m2 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size2);
            this.results = m2;
          } else m2.clear();
          for ( ; 0 < size2; size2 = in.mapNext()) {
            for ( ; size2 != 0; size2--) {
              java.lang.CharSequence k2 = null;
              k2 = in.readString(k2 instanceof Utf8 ? (Utf8)k2 : null);
              java.lang.CharSequence v2 = null;
              v2 = in.readString(v2 instanceof Utf8 ? (Utf8)v2 : null);
              m2.put(k2, v2);
            }
          }
          break;

        case 9:
          long size3 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a3 = this.responsibilities;
          if (a3 == null) {
            a3 = new SpecificData.Array<java.lang.CharSequence>((int)size3, SCHEMA$.getField("responsibilities").schema());
            this.responsibilities = a3;
          } else a3.clear();
          SpecificData.Array<java.lang.CharSequence> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a3 : null);
          for ( ; 0 < size3; size3 = in.arrayNext()) {
            for ( ; size3 != 0; size3--) {
              java.lang.CharSequence e3 = (ga3 != null ? ga3.peek() : null);
              e3 = in.readString(e3 instanceof Utf8 ? (Utf8)e3 : null);
              a3.add(e3);
            }
          }
          break;

        case 10:
          this.synchronized$ = in.readBoolean();
          break;

        case 11:
          long size4 = in.readArrayStart();
          java.util.List<eu.fau.cs7.daceDS.datamodel.Observer> a4 = this.observers;
          if (a4 == null) {
            a4 = new SpecificData.Array<eu.fau.cs7.daceDS.datamodel.Observer>((int)size4, SCHEMA$.getField("observers").schema());
            this.observers = a4;
          } else a4.clear();
          SpecificData.Array<eu.fau.cs7.daceDS.datamodel.Observer> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<eu.fau.cs7.daceDS.datamodel.Observer>)a4 : null);
          for ( ; 0 < size4; size4 = in.arrayNext()) {
            for ( ; size4 != 0; size4--) {
              eu.fau.cs7.daceDS.datamodel.Observer e4 = (ga4 != null ? ga4.peek() : null);
              if (e4 == null) {
                e4 = new eu.fau.cs7.daceDS.datamodel.Observer();
              }
              e4.customDecode(in);
              a4.add(e4);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










