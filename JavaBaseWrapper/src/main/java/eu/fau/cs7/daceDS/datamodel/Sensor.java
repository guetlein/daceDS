/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.fau.cs7.daceDS.datamodel;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Sensor extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4126625700188002364L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Sensor\",\"namespace\":\"eu.fau.cs7.daceDS.datamodel\",\"fields\":[{\"name\":\"sensorID\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"data\",\"type\":{\"type\":\"array\",\"items\":[\"boolean\",\"bytes\",\"double\",\"int\",\"string\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Sensor> ENCODER =
      new BinaryMessageEncoder<Sensor>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Sensor> DECODER =
      new BinaryMessageDecoder<Sensor>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Sensor> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Sensor> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Sensor> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Sensor>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Sensor to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Sensor from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Sensor instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Sensor fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence sensorID;
   private java.lang.CharSequence type;
   private java.util.List<java.lang.Object> data;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Sensor() {}

  /**
   * All-args constructor.
   * @param sensorID The new value for sensorID
   * @param type The new value for type
   * @param data The new value for data
   */
  public Sensor(java.lang.CharSequence sensorID, java.lang.CharSequence type, java.util.List<java.lang.Object> data) {
    this.sensorID = sensorID;
    this.type = type;
    this.data = data;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sensorID;
    case 1: return type;
    case 2: return data;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sensorID = (java.lang.CharSequence)value$; break;
    case 1: type = (java.lang.CharSequence)value$; break;
    case 2: data = (java.util.List<java.lang.Object>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'sensorID' field.
   * @return The value of the 'sensorID' field.
   */
  public java.lang.CharSequence getSensorId() {
    return sensorID;
  }


  /**
   * Sets the value of the 'sensorID' field.
   * @param value the value to set.
   */
  public void setSensorID(java.lang.CharSequence value) {
    this.sensorID = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'data' field.
   * @return The value of the 'data' field.
   */
  public java.util.List<java.lang.Object> getData() {
    return data;
  }


  /**
   * Sets the value of the 'data' field.
   * @param value the value to set.
   */
  public void setData(java.util.List<java.lang.Object> value) {
    this.data = value;
  }

  /**
   * Creates a new Sensor RecordBuilder.
   * @return A new Sensor RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.Sensor.Builder newBuilder() {
    return new eu.fau.cs7.daceDS.datamodel.Sensor.Builder();
  }

  /**
   * Creates a new Sensor RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Sensor RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.Sensor.Builder newBuilder(eu.fau.cs7.daceDS.datamodel.Sensor.Builder other) {
    if (other == null) {
      return new eu.fau.cs7.daceDS.datamodel.Sensor.Builder();
    } else {
      return new eu.fau.cs7.daceDS.datamodel.Sensor.Builder(other);
    }
  }

  /**
   * Creates a new Sensor RecordBuilder by copying an existing Sensor instance.
   * @param other The existing instance to copy.
   * @return A new Sensor RecordBuilder
   */
  public static eu.fau.cs7.daceDS.datamodel.Sensor.Builder newBuilder(eu.fau.cs7.daceDS.datamodel.Sensor other) {
    if (other == null) {
      return new eu.fau.cs7.daceDS.datamodel.Sensor.Builder();
    } else {
      return new eu.fau.cs7.daceDS.datamodel.Sensor.Builder(other);
    }
  }

  /**
   * RecordBuilder for Sensor instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Sensor>
    implements org.apache.avro.data.RecordBuilder<Sensor> {

    private java.lang.CharSequence sensorID;
    private java.lang.CharSequence type;
    private java.util.List<java.lang.Object> data;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.fau.cs7.daceDS.datamodel.Sensor.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sensorID)) {
        this.sensorID = data().deepCopy(fields()[0].schema(), other.sensorID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.data)) {
        this.data = data().deepCopy(fields()[2].schema(), other.data);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Sensor instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.fau.cs7.daceDS.datamodel.Sensor other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.sensorID)) {
        this.sensorID = data().deepCopy(fields()[0].schema(), other.sensorID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.data)) {
        this.data = data().deepCopy(fields()[2].schema(), other.data);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return sensorID;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Sensor.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.sensorID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Sensor.Builder clearId() {
      sensorID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Sensor.Builder setType(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Sensor.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'data' field.
      * @return The value.
      */
    public java.util.List<java.lang.Object> getData() {
      return data;
    }


    /**
      * Sets the value of the 'data' field.
      * @param value The value of 'data'.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Sensor.Builder setData(java.util.List<java.lang.Object> value) {
      validate(fields()[2], value);
      this.data = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'data' field has been set.
      * @return True if the 'data' field has been set, false otherwise.
      */
    public boolean hasData() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'data' field.
      * @return This builder.
      */
    public eu.fau.cs7.daceDS.datamodel.Sensor.Builder clearData() {
      data = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Sensor build() {
      try {
        Sensor record = new Sensor();
        record.sensorID = fieldSetFlags()[0] ? this.sensorID : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.data = fieldSetFlags()[2] ? this.data : (java.util.List<java.lang.Object>) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Sensor>
    WRITER$ = (org.apache.avro.io.DatumWriter<Sensor>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Sensor>
    READER$ = (org.apache.avro.io.DatumReader<Sensor>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










